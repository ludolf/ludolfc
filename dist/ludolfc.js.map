{"version":3,"file":"ludolfc.js","mappings":"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","sources":["webpack://ludolfc/webpack/universalModuleDefinition","webpack://ludolfc/./src/interpret.js","webpack://ludolfc/./src/lang.js","webpack://ludolfc/./src/ludolfc.js","webpack://ludolfc/./src/parser.js","webpack://ludolfc/webpack/bootstrap","webpack://ludolfc/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ludolfc\"] = factory();\n\telse\n\t\troot[\"ludolfc\"] = factory();\n})(this, () => {\nreturn ","const { \r\n    Types,\r\n    Errors,\r\n    Interruptions,\r\n    InterpretError: LangInterpretError,\r\n    Interrupt: LangInterrupt,\r\n    Void: LangVoid } = require('./lang')\r\n    \r\nclass Interpret {\r\n    constructor(imports = {}, controls, maxSteps = 100000) {\r\n        this.imports = imports\r\n        this.stepper = new ExecutionStepper(maxSteps, controls && controls.isInterrupted) // to prevent infinite loops        \r\n    }\r\n\r\n    async execute(ast) {\r\n        this.variables = new VariablesScope(this.imports)\r\n        this.stepper.reset()\r\n        return await this.executeBlock(ast, false)\r\n    }\r\n\r\n    async executeBlock(block, newScope = true) {        \r\n        if (newScope) this.variables = this.variables.pushScope()\r\n        let result\r\n        for (let stm of block.statements) {\r\n            result = await this.executeStatement(stm)\r\n        }\r\n        if (newScope) this.variables = this.variables.popScope()\r\n        return result ? result : new LangVoid()\r\n    }\r\n\r\n    async executeStatement(stm) {\r\n        this.stepper.step(stm.source)\r\n        return stm.isExpression ? await this.executeExpression(stm) :\r\n               stm.isAssignment ? await this.executeAssignment(stm) :\r\n               stm.isWhile ? await this.executeWhile(stm) :\r\n               stm.isIf ? await this.executeIf(stm) : \r\n               stm\r\n    }\r\n\r\n    async executeExpression(expression, assignNewValue = null) {\r\n        this.stepper.step(expression.source)\r\n        if (!expression.parts) throw new LangInterpretError(Errors.EMPTY_EXPRESSION, expression.source)\r\n        let parts = [...expression.parts]\r\n        return await this.executeExpressionParts(parts, assignNewValue)\r\n    }\r\n\r\n    async executeExpressionParts(parts, assignNewValue = null) {\r\n        // logical operators short circuit\r\n        let index = findFirstOp('&')\r\n        if (index) {\r\n            const left = await this.executeExpressionParts(parts.slice(0, index), assignNewValue)\r\n            if (left.type !== Types.BOOLEAN) throw new LangInterpretError(Errors.WRONG_BI_OPERATOR_SUBJECTS, left.source)\r\n            if (!left.value) return left\r\n            const right = await this.executeExpressionParts(parts.slice(index + 1), assignNewValue)\r\n            if (right.type !== Types.BOOLEAN) throw new LangInterpretError(Errors.WRONG_BI_OPERATOR_SUBJECTS, right.source)\r\n            return right\r\n        }\r\n        index = findFirstOp('|')\r\n        if (index) {\r\n            const left = await this.executeExpressionParts(parts.slice(0, index), assignNewValue)\r\n            if (left.type !== Types.BOOLEAN) throw new LangInterpretError(Errors.WRONG_BI_OPERATOR_SUBJECTS, left.source)\r\n            if (left.value) return left\r\n            const right = await this.executeExpressionParts(parts.slice(index + 1), assignNewValue)\r\n            if (right.type !== Types.BOOLEAN) throw new LangInterpretError(Errors.WRONG_BI_OPERATOR_SUBJECTS, right.source)\r\n            return right\r\n        }\r\n\r\n        // left to right by precendence\r\n        let assignApplied = false\r\n        while ((index = findNextOp()) > -1) {\r\n            const op = parts[index]\r\n\r\n            if (assignNewValue && !op.isObjectAccess && !op.isArrayAccess) throw new LangInterpretError(Errors.ACCESS_OPERATOR_EXPECTED, op.source)\r\n\r\n            try {\r\n                if (op.isUni) {\r\n                    const a = await this.executeExpressionPart(parts[index + 1])\r\n                    if (!a.type) throw new LangInterpretError(Errors.WRONG_UNI_OPERATOR_SUBJECT, op.source)\r\n                    parts[index] = op.apply(a)\r\n                    parts = removeElementAt(parts, index + 1)\r\n                } else\r\n                if (op.isBi) {\r\n                    const a = await this.executeExpressionPart(parts[index - 1])\r\n                    const b = await this.executeExpressionPart(parts[index + 1])\r\n                    if (!a.type || !b.type) throw new LangInterpretError(Errors.WRONG_BI_OPERATOR_SUBJECTS, op.source)\r\n                    if (a.type !== b.type) throw new LangInterpretError(Errors.UNMATCHING_BI_OPERATOR_SUBJECTS, op.source)\r\n                    parts[index] = op.apply(a, b)\r\n                    parts = removeElementAt(parts, index - 1, index + 1)\r\n                } else\r\n                if (op.isArrayAccess) {\r\n                    const a = await this.executeExpressionPart(parts[index - 1])\r\n                    if (Types.ARRAY !== a.type) throw new LangInterpretError(Errors.EXPECTED_ARRAY, op.source)\r\n                    if (assignNewValue && a.protectedAttributes()) throw new LangInterpretError(Errors.PROTECTED_FROM_MODIFICATION, op.source)\r\n                    const indexes = await Promise.all(op.indexes.map(i => this.executeExpressionPart(i)))\r\n                    parts[index] = op.apply(a, indexes, (assignNewValue && isLastOperator()) ? assignNewValue : null)\r\n                    if (!parts[index]) throw new LangInterpretError(Errors.ATTRIBUTE_NOT_FOUND, op.source)\r\n                    parts = removeElementAt(parts, index - 1)\r\n                    assignApplied = true\r\n                } else\r\n                if (op.isObjectAccess) {\r\n                    const o = await this.executeExpressionPart(parts[index - 1])\r\n                    if (!o.isObject && !o.isFunction) throw new LangInterpretError(Errors.EXPECTED_OBJECT, op.source)\r\n                    if (assignNewValue && o.protectedAttributes()) throw new LangInterpretError(Errors.PROTECTED_FROM_MODIFICATION, op.source)\r\n                    parts[index] = op.apply(o, (assignNewValue && isLastOperator()) ? assignNewValue : null)\r\n                    if (!parts[index]) throw new LangInterpretError(Errors.ATTRIBUTE_NOT_FOUND, op.source)\r\n                    parts = removeElementAt(parts, index - 1)\r\n                    assignApplied = true\r\n                } else \r\n                if (op.isCall) {\r\n                    parts[index] = new FunctionExecution(parts[index - 1], op.params)  // to prevent immediate execution\r\n                    parts = removeElementAt(parts, index - 1)\r\n                }\r\n                else throw new LangInterpretError(Errors.UNKNOWN_OPERATOR, op.source)\r\n\r\n            } catch (e) {   // LangError could be raised from applying the operator in lang.js\r\n                if (e.isLangError) {\r\n                    if (!e.isInterpretError) throw new LangInterpretError(e.id, op.source, e.arg1, e.arg2)\r\n                } else {\r\n                    throw new LangInterpretError(Errors.UNKNOWN_ERROR, op.source, e)\r\n                }\r\n                throw e\r\n            }\r\n        }\r\n\r\n        if (assignNewValue && !assignApplied) throw new LangInterpretError(Errors.ACCESS_OPERATOR_EXPECTED, parts[0].source)\r\n\r\n        return await this.executeExpressionPart(parts[0]) // parts are reduced to a single result\r\n\r\n        function findNextOp() { // returns an index of the next part\r\n            let index = -1\r\n            let maxPrecedence = Number.MIN_SAFE_INTEGER\r\n            for (let i = 0; i < parts.length; i++) {\r\n                const op = parts[i]\r\n                if (!op.isOperator) continue\r\n                if (maxPrecedence < op.precedence || (op.isUni && maxPrecedence === op.precedence)) {\r\n                    index = i\r\n                    maxPrecedence = op.precedence\r\n                }\r\n            }\r\n            return index\r\n        }\r\n\r\n        function removeElementAt(arr, ...indexes) {\r\n            return arr.filter((_, i) => !indexes.includes(i))\r\n        }\r\n\r\n        function isLastOperator() {\r\n            return parts.length === 2\r\n        }\r\n\r\n        function findFirstOp(op) {\r\n            for (let i = 0; i < parts.length; i++)\r\n                if (parts[i].isBi && parts[i].op === op) return i\r\n        }\r\n    }\r\n\r\n    async executeExpressionPart(expressionPart) {\r\n        this.stepper.step(expressionPart.source)\r\n        \r\n        if (expressionPart.isReference) {\r\n            if (!this.variables.hasVariable(expressionPart.varName)) throw new LangInterpretError(Errors.UNREFERENCED_VARIABLE, expressionPart.source - expressionPart.varName.length, expressionPart.varName)\r\n            return this.variables.getVariable(expressionPart.varName)\r\n        }\r\n        if (expressionPart.isFunctionExecution) {\r\n            const func = await this.executeExpressionPart(expressionPart.funcExp)\r\n            const params = await Promise.all(expressionPart.params.map(p => this.executeExpressionPart(p)))\r\n            return await this.executeFunctionCall(func, params)\r\n        }\r\n        if (expressionPart.isExpression) {\r\n            return await this.executeExpression(expressionPart)\r\n        }\r\n        if (Types.ARRAY === expressionPart.type) {\r\n            const arr = expressionPart.value\r\n            for (let i = 0; i < arr.length; i++) {\r\n                arr[i] = await this.executeExpressionPart(arr[i])\r\n            }\r\n        } else\r\n        if (Types.OBJECT === expressionPart.type) {\r\n            const obj = expressionPart.value\r\n            for (let k of Object.keys(obj)) {\r\n                obj[k] = await this.executeExpressionPart(obj[k])\r\n                if (obj[k].isObject || obj[k].isFunction) obj[k].parent = expressionPart\r\n            }\r\n        }\r\n        if (expressionPart.isFunction && !expressionPart.scope) {\r\n            expressionPart.scope = this.variables.copy()            \r\n        }\r\n        return expressionPart\r\n    }\r\n\r\n    async executeFunctionCall(f, params) {\r\n        if (f.isNative) {\r\n            const result = await f.call(...params)\r\n            return !result ? new LangVoid() : result\r\n        }\r\n\r\n        if ((!params && f.args) || params.length !== f.args.length) throw new LangInterpretError(Errors.FUNC_ARGUMENTS_MISHMASH, f.source)\r\n        // scoped variables\r\n        let i = 0\r\n        const variablesBak = this.variables\r\n        this.variables = f.scope.pushScope()\r\n        for (let arg of f.args) {\r\n            this.variables.setVariable(arg, params[i++], true)\r\n        }\r\n        if (f.parent) {\r\n            // cache \"this\" object into variable $\r\n            this.variables.setVariable('$', f.parent, true)\r\n        }\r\n        \r\n        try {\r\n            const result = await this.executeBlock(f.body, false)\r\n            return result\r\n\r\n        } finally {  // clean up variables\r\n            this.variables.popScope()\r\n            this.variables = variablesBak\r\n        }\r\n    }\r\n\r\n    async executeAssignment(assignment) {\r\n        if (!assignment.left || !assignment.right) throw new LangInterpretError(Errors.WRONG_ASSIGNMENT, assignment.source)\r\n        const value = await this.executeExpressionPart(assignment.right)        \r\n        // variable assignment\r\n        if (assignment.left.isVariable) {\r\n            const variable = this.variables.getVariable(assignment.left.name)\r\n            if (variable.protected && variable.protected()) throw new LangInterpretError(Errors.PROTECTED_FROM_MODIFICATION, assignment.left.source)\r\n            this.variables.setVariable(assignment.left.name, value)\r\n        } else\r\n        // object attribute or array element assignment\r\n        if (assignment.left.isExpression) {\r\n            await this.executeExpression(assignment.left, value)\r\n        }\r\n        else throw new LangInterpretError(Errors.WRONG_ASSIGNEE_TYPE)\r\n    }\r\n\r\n    async executeWhile(whileStm) {\r\n        if (!whileStm.condition || !whileStm.condition.isExpression) throw new LangInterpretError(Errors.WRONG_CONDITION, whileStm.source)\r\n        while (true) {\r\n            const cond = await this.executeExpressionPart(whileStm.condition)\r\n            if (cond.type !== Types.BOOLEAN) throw new LangInterpretError(Errors.WRONG_CONDITION_VALUE, cond.source)\r\n            if (cond.value) await this.executeBlock(whileStm.body)\r\n            else break\r\n        } \r\n    }\r\n\r\n    async executeIf(ifStm) {\r\n        if (!ifStm.condition || !ifStm.condition.isExpression) throw new LangInterpretError(Errors.WRONG_CONDITION, ifStm.source)\r\n        const cond = await this.executeExpressionPart(ifStm.condition)\r\n        if (cond.type !== Types.BOOLEAN) throw new LangInterpretError(Errors.WRONG_CONDITION_VALUE, cond.source)\r\n        if (cond.value) await this.executeBlock(ifStm.body)\r\n        else if (ifStm.elseBody) await this.executeBlock(ifStm.elseBody)\r\n    }\r\n}\r\n\r\nclass VariablesScope {\r\n    constructor(imports = {}) {\r\n        this.variables = new Map()\r\n        this.parent = null\r\n        if (imports) Object.entries(imports).forEach(([k,v]) => this.variables.set(k, v))\r\n    }\r\n\r\n    hasVariable(name) {\r\n        if (this.variables.has(name)) return true\r\n        if (this.variables.has('$')) {\r\n            const self = this.variables.get('$')\r\n            if (self.hasAttribute(name)) return true\r\n        }\r\n        if (this.parent) return this.parent.hasVariable(name)\r\n        return false\r\n    }\r\n\r\n    getVariable(name) {\r\n        if (this.variables.has(name)) return this.variables.get(name)\r\n        if (this.variables.has('$')) {\r\n            const self = this.variables.get('$')\r\n            if (self.hasAttribute(name)) return self.attribute(name)\r\n        }\r\n        if (this.parent) return this.parent.getVariable(name)\r\n        return false\r\n    }\r\n\r\n    setVariable(name, value, scoped = false) {\r\n        if (scoped) {\r\n            this.variables.set(name, value)\r\n            return\r\n        }\r\n        let found = false\r\n        let scope = this\r\n        do {\r\n            if (scope.variables.has(name)) {\r\n                scope.variables.set(name, value)\r\n                found = true\r\n            }\r\n            scope = scope.parent\r\n        } while (!found && scope)\r\n        \r\n        if (!found) {\r\n            this.variables.set(name, value)\r\n        }\r\n    }\r\n\r\n    pushScope() {\r\n        const newScope = new VariablesScope()\r\n        newScope.parent = this\r\n        return newScope\r\n    }\r\n\r\n    popScope() {\r\n        const parent = this.parent\r\n        this.parent = null\r\n        return parent\r\n    }\r\n\r\n    copy() {\r\n        const newScope = new VariablesScope(this.imports)\r\n        newScope.variables = this.variables\r\n        newScope.parent = this.parent\r\n        return newScope\r\n    }\r\n}\r\n\r\n// wrapper over a function call (func and params are not resolved yet)\r\nclass FunctionExecution {\r\n    constructor(funcExp, params) {\r\n        this.funcExp = funcExp\r\n        this.params = params\r\n        this.isFunctionExecution = true\r\n    }\r\n}\r\n\r\nclass ExecutionStepper {\r\n    constructor(maxSteps, isInterruptedFn) {\r\n        this.maxSteps = maxSteps\r\n        this.isInterruptedFn = isInterruptedFn\r\n        this.steps = 0        \r\n    }\r\n\r\n    step(source) {\r\n        if (this.isInterruptedFn && this.isInterruptedFn()) throw new LangInterrupt(Interruptions.USER_SUSSPEND)\r\n        this.steps++\r\n        if (this.steps > this.maxSteps) throw new LangInterpretError(Errors.EXECUTION_STEPS_EXCEEDED, source)\r\n    }\r\n\r\n    reset(maxSteps = null) {\r\n        this.steps = 0\r\n        if (maxSteps) this.maxSteps = maxSteps\r\n    }\r\n}\r\n\r\nmodule.exports = Interpret","const Keywords = {\r\n    TRUE: ['true', 'pravda', 'wahr'],\r\n    FALSE: ['false', 'nepravda', 'unwahr'],\r\n    IF: ['if', 'pokud', 'falls'],\r\n    ELSE: ['else', 'jinak', 'sonst'],\r\n    WHILE: ['while', 'dokud', 'solange'],\r\n}\r\n\r\nconst SizeKeywords = ['size', 'velikost', 'größe']\r\n\r\nconst Errors = {\r\n    INVALID_UNI_OPERATOR: 'INVALID_UNI_OPERATOR',\r\n    INVALID_BI_OPERATOR: 'INVALID_BI_OPERATOR',\r\n    UNEXPECTED_END: 'UNEXPECTED_END',\r\n    UNEXPECTED_SYMBOL: 'UNEXPECTED_SYMBOL',\r\n    EXPECTED_SYMBOL: 'EXPECTED_SYMBOL',\r\n    UNREFERENCED_VARIABLE: 'UNREFERENCED_VARIABLE',\r\n    UNEXPECTED_KEYWORD: 'UNEXPECTED_KEYWORD',\r\n    INVALID_IDENTIFIER: 'INVALID_IDENTIFIER',\r\n    UNEVEN_OPERATORS: 'UNEVEN_OPERATORS',\r\n    EXPECTED_FUNCTION: 'EXPECTED_FUNCTION',\r\n    EXPECTED_STATEMENT_END: 'EXPECTED_STATEMENT_END',\r\n    ARRAY_INDEX_NOT_NUMBER: 'ARRAY_INDEX_NOT_NUMBER',\r\n    ARRAY_INDEX_MISSING: 'ARRAY_INDEX_MISSING',\r\n    ARRAY_INDEX_OUT_BOUNDS: 'ARRAY_INDEX_OUT_BOUNDS',\r\n    FUNC_ARGUMENTS_MISHMASH: 'FUNC_ARGUMENTS_MISHMASH',\r\n    ATTRIBUTE_ALREADY_EXISTS: 'ATTRIBUTE_ALREADY_EXISTS',\r\n    ATTRIBUTE_NOT_FOUND: 'ATTRIBUTE_NOT_FOUND',\r\n    ELEMENT_NOT_FOUND: 'ELEMENT_NOT_FOUND',\r\n    EMPTY_EXPRESSION: 'EMPTY_EXPRESSION',\r\n    UNKNOWN_OPERATOR: 'UNKNOWN_OPERATOR',\r\n    OPERATOR_NOT_APPLICABLE: 'OPERATOR_NOT_APPLICABLE',\r\n    ACCESS_OPERATOR_EXPECTED: 'ACCESS_OPERATOR_EXPECTED',\r\n    WRONG_UNI_OPERATOR_SUBJECT: 'WRONG_UNI_OPERATOR_SUBJECT',\r\n    WRONG_BI_OPERATOR_SUBJECTS: 'WRONG_BI_OPERATOR_SUBJECTS',\r\n    UNMATCHING_BI_OPERATOR_SUBJECTS: 'UNMATCHING_BI_OPERATOR_SUBJECTS',\r\n    EXPECTED_ARRAY: 'EXPECTED_ARRAY',\r\n    EXPECTED_OBJECT: 'EXPECTED_OBJECT',\r\n    EXPECTED_IDENTIFIER: 'EXPECTED_IDENTIFIER',\r\n    WRONG_ASSIGNMENT: 'WRONG_ASSIGNMENT',\r\n    WRONG_ASSIGNEE_TYPE: 'WRONG_ASSIGNEE_TYPE',\r\n    READONLY_ATTRIBUTE: 'READONLY_ATTRIBUTE',\r\n    WRONG_CONDITION: 'WRONG_CONDITION',\r\n    WRONG_CONDITION_VALUE: 'WRONG_CONDITION_VALUE',\r\n    EXECUTION_STEPS_EXCEEDED: 'EXECUTION_STEPS_EXCEEDED',\r\n    PARSER_STEPS_EXCEEDED: 'PARSER_STEPS_EXCEEDED',\r\n    PROTECTED_FROM_MODIFICATION: 'PROTECTED_FROM_MODIFICATION',\r\n    DIVISION_BY_ZERO: 'DIVISION_BY_ZERO',\r\n    UNKNOWN_ERROR: 'UNKNOWN_ERROR',\r\n}\r\n\r\nconst Types = {\r\n    NUMBER: 'NUMBER',\r\n    BOOLEAN: 'BOOLEAN',\r\n    STRING: 'STRING',\r\n    ARRAY: 'ARRAY',\r\n    OBJECT: 'OBJECT',\r\n    FUNCTION: 'FUNCTION',\r\n    VOID: 'VOID',\r\n}\r\n\r\nconst Interruptions = {\r\n    USER_SUSSPEND: 'USER_SUSSPEND',\r\n}\r\n\r\nclass LangInterrupt {\r\n    constructor(id) {\r\n        this.id = id\r\n        this.isLangInterruption = true\r\n    }\r\n}\r\n\r\nclass LangError extends Error {\r\n    constructor(id, pos, arg1, arg2) {\r\n        super(id)\r\n        this.details = `${arg1 ? `\"${arg1}\"` : ''} ${arg2 ? `\"${arg2}\"` : ''}`\r\n        this.message = `${id} ${this.details}`\r\n        this.id = id\r\n        this.arg1 = arg1\r\n        this.arg2 = arg2\r\n        this.position = pos\r\n        this.isLangError = true\r\n    }\r\n}\r\n\r\nclass LangParseError extends LangError {\r\n    constructor(id, pos, arg1, arg2) {\r\n        super(id, pos, arg1, arg2)\r\n        this.isParseError = true\r\n    }\r\n}\r\n\r\nclass LangInterpretError extends LangError {\r\n    constructor(id, pos, arg1, arg2) {\r\n        super(id, pos, arg1, arg2)\r\n        this.isInterpretError = true\r\n    }\r\n}\r\n\r\nclass Block {\r\n    constructor(statements, source) {\r\n        this.statements = statements\r\n        this.source = source\r\n    }\r\n}\r\n\r\nclass Statement {\r\n    constructor(source) {\r\n        this.isExpression = false\r\n        this.isAssignment = false\r\n        this.isWhile = false\r\n        this.isIf = false\r\n        this.source = source\r\n    }\r\n}\r\n\r\nclass Assignment extends Statement {\r\n    constructor(left, right, source) {\r\n        super(source)\r\n        this.isAssignment = true\r\n        this.left = left\r\n        this.right = right\r\n    }\r\n}\r\n\r\nclass While extends Statement {\r\n    constructor(condition, body, source) {\r\n        super(source)\r\n        this.isWhile = true\r\n        this.condition = condition\r\n        this.body = body\r\n    }\r\n}\r\n\r\nclass If extends Statement {\r\n    constructor(condition, body, bodyElse, source) {\r\n        super(source)\r\n        this.isIf = true\r\n        this.condition = condition\r\n        this.body = body\r\n        this.elseBody = bodyElse\r\n    }\r\n}\r\n\r\nclass Expression extends Statement {\r\n    constructor(parts, source) {\r\n        super(source)\r\n        this.isExpression = true\r\n        this.parts = parts\r\n    }\r\n}\r\n\r\nclass Variable {\r\n    constructor(name, source) {\r\n        this.isVariable = true\r\n        this.name = name\r\n        this.source = source\r\n    }\r\n}\r\n\r\nclass Operator {\r\n    constructor(op, precedence = -1) {\r\n        this.op = op\r\n        this.isOperator = true\r\n        this.precedence = precedence\r\n    }\r\n}\r\n\r\nclass UniOperator extends Operator {\r\n    constructor(op, source) {\r\n        super(op)\r\n        this.isUni = true\r\n        this.precedence = this.getPrecedence()\r\n        this.source = source\r\n    }\r\n    apply(a) {\r\n        const fn = getFn(this.op)\r\n        if (!fn || !fn.call) throw new LangError(Errors.OPERATOR_NOT_APPLICABLE, null, this.op)\r\n        return fn.call()\r\n\r\n        function getFn(op) {\r\n            switch (op) {\r\n                case '!': \r\n                case '-': return a.neg\r\n                default: throw new LangError(Errors.INVALID_UNI_OPERATOR, null, this.op)\r\n            }\r\n        }\r\n    }\r\n    getPrecedence() { // based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\r\n        switch (this.op) {\r\n            case '!':\r\n            case '-': return 14\r\n            default: -1\r\n        }\r\n    }\r\n}\r\n\r\nclass BiOperator extends Operator {\r\n    constructor(op, source) {\r\n        super(op)\r\n        this.isBi = true\r\n        this.precedence = this.getPrecedence()\r\n        this.source = source\r\n    }\r\n    apply(a, b) {\r\n        const fn = getFn(this.op)\r\n        if (!fn || !fn.call) {\r\n            if ('=' === this.op) return new LangBoolean(false)\r\n            throw new LangError(Errors.OPERATOR_NOT_APPLICABLE, null, this.op)\r\n        }\r\n        if ('/' === this.op && Types.NUMBER === b.type && b.value === 0) {\r\n            throw new LangError(Errors.DIVISION_BY_ZERO, null, this.op)\r\n        }\r\n        return fn.call(b)\r\n\r\n        function getFn(op) {\r\n            switch (op) {\r\n                case '*': return a.mult\r\n                case '/': return a.div\r\n                case '%': return a.mod\r\n                case '+': return a.plus\r\n                case '-': return a.minus\r\n                case '<': return a.lt\r\n                case '<=': return a.le\r\n                case '>': return a.gt\r\n                case '>=': return a.ge\r\n                case '=': return a.eq\r\n                case '!=': return a.ne\r\n                case '&': return a.and\r\n                case '|': return a.or\r\n                default: throw new LangError(Errors.INVALID_BI_OPERATOR, null, this.op)\r\n            }\r\n        }\r\n    }\r\n    getPrecedence() { // based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\r\n        switch (this.op) {\r\n            case '*':\r\n            case '/':\r\n            case '%': return 12\r\n            case '+': \r\n            case '-': return 11\r\n            case '<': \r\n            case '<=':\r\n            case '>':\r\n            case '>=': return 9\r\n            case '=': \r\n            case '!=': return 8\r\n            case '&': return 4\r\n            case '|': return 3\r\n            default: -1\r\n        }\r\n    }\r\n}\r\n\r\nclass ArrayAccess extends Operator {\r\n    constructor(indexes, source) {\r\n        super('[]', 17)\r\n        this.isAccess = true\r\n        this.isArrayAccess = true\r\n        this.indexes = indexes\r\n        this.source = source\r\n    }\r\n    apply(a, indexes, newValue) { // indexes are resolved, but this.indexes are AST (expressions)\r\n        return a.element(indexes, newValue)\r\n    }\r\n}\r\n\r\nclass ObjectAccess extends Operator {\r\n    constructor(attrName, source) {\r\n        super('.', 17)\r\n        this.isAccess = true\r\n        this.isObjectAccess = true\r\n        this.attrName = attrName\r\n        this.source = source\r\n    }\r\n    apply(o, newValue) {\r\n        return o.attribute(this.attrName, newValue)\r\n    }\r\n}\r\n\r\nclass FunctionCall extends Operator {\r\n    constructor(params, source) {\r\n        super('()', 17)\r\n        this.isAccess = true\r\n        this.isCall = true\r\n        this.params = params\r\n        this.source = source\r\n    }\r\n}\r\n\r\nclass VarReference {\r\n    constructor(varName, source) {\r\n        this.isReference = true\r\n        this.varName = varName\r\n        this.source = source\r\n    }\r\n}\r\n\r\nclass LangObject {\r\n    constructor(obj, source, type = Types.OBJECT) {\r\n        this.value = obj\r\n        this.type = type\r\n        this.isObject = true\r\n        this.parent = null\r\n        this.source = source\r\n\r\n        this.eq = new LangNativeFunction(x => new LangBoolean(areObjectsEqual(this, x)))\r\n        this.ne = new LangNativeFunction(x => new LangBoolean(!(this.eq.call(x).value)))\r\n    }\r\n    attribute(name, newValue) {\r\n        const value = this[name] ? this[name] : this.value[name] // explicit attrs have priority over native ones\r\n        if (newValue && this.value[name]) this.value[name] = newValue\r\n        if (value) return value\r\n        if (this.parent) return this.parent.attribute(name)\r\n    }\r\n    hasAttribute(name) {\r\n        const hasValue = this[name] || this.value[name]\r\n        return hasValue || (this.parent && this.parent.hasAttribute(name))\r\n    }\r\n    protected() {\r\n        return this.isProtected || (this.parent && this.parent.protected())\r\n    }\r\n    protectedAttributes() {\r\n        return this.protected()\r\n    }\r\n}\r\n\r\nclass LangValueObject extends LangObject {\r\n    constructor(value, source, type) {\r\n        super(value, source, type)\r\n\r\n        this.eq = new LangNativeFunction(x => new LangBoolean(this.value === x.value))\r\n        this.ne = new LangNativeFunction(x => new LangBoolean(this.value !== x.value))\r\n    }\r\n}\r\n\r\nclass LangNumber extends LangValueObject {\r\n    constructor(value, source) {\r\n        super(value, source, Types.NUMBER)\r\n        \r\n        this.mult = new LangNativeFunction(x => new LangNumber(this.value * x.value))\r\n        this.div = new LangNativeFunction(x => new LangNumber(this.value / x.value))\r\n        this.mod = new LangNativeFunction(x => new LangNumber(this.value % x.value))\r\n        this.plus = new LangNativeFunction(x => new LangNumber(this.value + x.value))\r\n        this.minus = new LangNativeFunction(x => new LangNumber(this.value - x.value))\r\n        this.lt = new LangNativeFunction(x => new LangBoolean(this.value < x.value))\r\n        this.le = new LangNativeFunction(x => new LangBoolean(this.value <= x.value))\r\n        this.gt = new LangNativeFunction(x => new LangBoolean(this.value > x.value))\r\n        this.ge = new LangNativeFunction(x => new LangBoolean(this.value >= x.value))\r\n        this.neg = new LangNativeFunction(() => new LangNumber(-this.value))\r\n        this.sum = new LangNativeFunction((...x) => new LangNumber(x.reduce((a,c) => a + c.value, this.value)))\r\n        this.round = new LangNativeFunction(() => new LangNumber(Math.round(this.value)))\r\n        this.floor = new LangNativeFunction(() => new LangNumber(Math.floor(this.value)))\r\n        this.ceil = new LangNativeFunction(() => new LangNumber(Math.ceil(this.value)))\r\n    }\r\n}\r\n\r\nclass LangString extends LangValueObject {\r\n    constructor(value, source) {\r\n        super(value, source, Types.STRING)\r\n\r\n        this.concat = new LangNativeFunction(x => new LangString(this.value + x.value))\r\n        this.length = new LangNativeFunction(() => new LangNumber(this.value.length))\r\n        \r\n        this.plus = this.concat\r\n        for (let s of SizeKeywords) this[s] = new LangNumber(this.value.length)\r\n    }\r\n}\r\n\r\nclass LangBoolean extends LangValueObject {\r\n    constructor(value, source) {\r\n        super(value, source, Types.BOOLEAN)\r\n\r\n        this.and = new LangNativeFunction(x => new LangBoolean(this.value && x.value))\r\n        this.or = new LangNativeFunction(x => new LangBoolean(this.value || x.value))\r\n        this.xor = new LangNativeFunction(x => new LangBoolean(this.value ? !x.value : x.value))\r\n        this.nand = new LangNativeFunction(x => new LangBoolean(!(this.value && x.value)))\r\n        this.neg = new LangNativeFunction(() => new LangBoolean(!this.value))\r\n\r\n        this.mult = this.and\r\n        this.plus = this.or\r\n    }\r\n}\r\n\r\nclass LangArray extends LangValueObject {\r\n    constructor(value, source) {\r\n        super(value, source, Types.ARRAY)\r\n\r\n        this.concat = new LangNativeFunction(x => new LangArray(this.value.concat(x.value)))\r\n\r\n        this.plus = this.concat\r\n        for (let s of SizeKeywords) this[s] = new LangNumber(this.value.length)\r\n\r\n        this.eq = new LangNativeFunction(x => {\r\n            if (!x || !x.value) return new LangBoolean(false)\r\n            if (this.value.length !== x.value.length) return new LangBoolean(false)\r\n            for (let i = 0; i < this.value.length; i++)\r\n                if (!this.value[i].eq || !this.value[i].eq.isNative || !this.value[i].eq.call(x.value[i]).value) return new LangBoolean(false)\r\n            return new LangBoolean(true)\r\n        })\r\n        this.ne = new LangNativeFunction(x => new LangBoolean(!(this.eq.call(x).value)))\r\n    }\r\n    element(indexes, newValue) {\r\n        return indexes.reduce((a,c,i) => {\r\n            const index = Math.ceil(c.value)\r\n            if (index < 0 || index >= a.value.length) throw new LangError(Errors.ARRAY_INDEX_OUT_BOUNDS)\r\n            const v = a.value[index]\r\n            // set the value for the last element\r\n            if (newValue && i === indexes.length - 1)\r\n                a.value[index] = newValue            \r\n            return v\r\n        }, this)\r\n    }\r\n    attribute(name, newValue) {\r\n        if (SizeKeywords.includes(name.toLowerCase())) {\r\n            if (newValue) throw new LangError(Errors.READONLY_ATTRIBUTE)\r\n            return new LangNumber(this.value.length)\r\n        }\r\n        return super.attribute(name, newValue)\r\n    }\r\n    hasAttribute(name) {\r\n        return SizeKeywords.includes(name.toLowerCase()) || super.attribute(name, newValue)\r\n    }\r\n}\r\n\r\nclass LangVoid extends LangValueObject {\r\n    constructor(source) {\r\n        super(null, source, Types.VOID)\r\n\r\n        this.eq = new LangNativeFunction(x => new LangBoolean(false))\r\n        this.ne = new LangNativeFunction(x => new LangBoolean(false))\r\n    }\r\n}\r\n\r\nclass LangFunction {\r\n    constructor(body, args, funcId, source) {\r\n        this.type = Types.FUNCTION\r\n        this.body = body\r\n        this.args = args\r\n        this.isFunction = true\r\n        this.source = source\r\n        this.funcId = funcId\r\n\r\n        this.eq = new LangNativeFunction(g => new LangBoolean(g.funcId === this.funcId))\r\n        this.ne = new LangNativeFunction(g => new LangBoolean(g.funcId !== this.funcId))\r\n    }\r\n    attribute(name, newValue) {\r\n        if (newValue) throw new LangError(Errors.READONLY_ATTRIBUTE)\r\n        const value = this[name] ? this[name] : this.value[name] // explicit attrs have priority over native ones\r\n        if (value) return value\r\n    }\r\n    hasAttribute(name) {\r\n        return this[name] || this.value[name]\r\n    }\r\n    protectedAttributes() {\r\n        return true\r\n    }\r\n}\r\n\r\nclass LangNativeFunction {\r\n    constructor(func, source) {\r\n        this.type = Types.FUNCTION\r\n        this.func = func\r\n        this.isNative = true\r\n        this.source = source\r\n    }\r\n    call(...params) {\r\n        return this.func(...params)\r\n    }\r\n}\r\n\r\nfunction areObjectsEqual(a, b) {\r\n    const aKeys = Object.keys(a.value)\r\n    const bKeys = Object.keys(b.value)\r\n    if (aKeys.length !== bKeys.length) return false\r\n    for (k of aKeys) {\r\n        if (!a.value[k].eq.call(b.value[k])) return false\r\n    }\r\n    return true\r\n}\r\n\r\nmodule.exports = {\r\n    Keywords,\r\n    Errors,\r\n    Interruptions,\r\n    Types,\r\n    SizeKeywords,\r\n    Block,\r\n    Assignment,\r\n    While,\r\n    If,\r\n    Expression,\r\n    Variable,\r\n    UniOperator,\r\n    BiOperator,\r\n    ArrayAccess,\r\n    ObjectAccess,\r\n    FunctionCall,\r\n    VarReference,\r\n    ParseError: LangParseError,\r\n    InterpretError: LangInterpretError,\r\n    Interrupt: LangInterrupt,\r\n    Object: LangObject,\r\n    Number: LangNumber,\r\n    String: LangString,\r\n    Boolean: LangBoolean,\r\n    Array: LangArray,\r\n    Function: LangFunction,\r\n    NativeFunction: LangNativeFunction,\r\n    Void: LangVoid,\r\n}","const lang = require('./lang')\r\nconst Parser = require('./parser')\r\nconst Interpret = require('./interpret')\r\n\r\nclass LudolfC {\r\n    /**\r\n     * @param {object} imports \r\n     * @param {isInterrupted: () => boolean} controls \r\n     */\r\n    constructor(imports = {}, controls = {}) {\r\n        this.parser = new Parser()\r\n        this.interpret = new Interpret(imports, controls)\r\n    }\r\n\r\n    /**\r\n     * Execute LudolfC code.\r\n     * @param {string} code \r\n     * @returns result of the execution\r\n     */\r\n    async execute(code) {\r\n        try {\r\n            const ast = this.parser.parse(code)\r\n            return await this.interpret.execute(ast)\r\n\r\n        } catch (e) {\r\n            if (e.isLangError && (e.position || e.position === 0)) {\r\n                const {line, col} = lineAndCol(code, e.position)\r\n                e.line = line\r\n                e.col = col\r\n            }\r\n            throw e\r\n        }\r\n    }\r\n\r\n    hasVariable(name) {\r\n        return this.interpret.variables.hasVariable(name)\r\n    }\r\n\r\n    getVariable(name) {\r\n        return this.interpret.variables.getVariable(name)\r\n    }\r\n}\r\n\r\nfunction lineAndCol(code, position) {\r\n    let line = 1    // starting from 1\r\n    let col = 1\r\n    for (let i = 0; i < code.length && i <= position; i++) {\r\n        col++\r\n        if ('\\n' === code[i]) {\r\n            line++\r\n            col = 1\r\n        }\r\n    }\r\n    col = Math.max(1, col - 1)\r\n    return {line, col}\r\n}\r\n\r\nmodule.exports = { LudolfC, lang }\r\n","const { \r\n    Errors,\r\n    Keywords,\r\n    Block,\r\n    Assignment,\r\n    While,\r\n    If,\r\n    Expression,\r\n    Variable,\r\n    UniOperator,\r\n    BiOperator,\r\n    ArrayAccess,\r\n    ObjectAccess,\r\n    FunctionCall,\r\n    VarReference,\r\n    ParseError: LangParseError,\r\n    Object: LangObject,\r\n    Number: LangNumber,\r\n    String: LangString,\r\n    Boolean: LangBoolean,\r\n    Array: LangArray,\r\n    Function: LangFunction,\r\n    Void: LangVoid } = require('./lang')\r\n\r\nconst UniOperators = ['!', '-']\r\nconst BiOperators = ['*', '/', '%', '+', '-', '<', '<=', '>', '>=', '=', '!=', '&', '|']\r\n\r\nconst RE_NATIONAL_CHARS = `ěščřžťďýáíéúůüöäňñĚŠČŘŽŤĎÝÁÍÉÚŮÜÖÄŇÑß`\r\nconst RE_IDENTIFIER = `[a-zA-Z_${RE_NATIONAL_CHARS}][a-zA-Z0-9_${RE_NATIONAL_CHARS}]*`\r\nconst RE_FUNCTION = `\\\\((\\\\s*(${RE_IDENTIFIER})\\\\s*(,\\\\s*(${RE_IDENTIFIER}))*)?\\\\s*\\\\)\\\\s*\\{(.|\\\\s)*\\\\}`\r\n\r\nclass Source {\r\n    constructor(code, startingAt = 0) {\r\n        this.code = code + '\\n'\r\n        this.pos = 0\r\n        this.startingAt = startingAt\r\n    }\r\n\r\n    move(step = 1) {\r\n        this.pos += step\r\n    }\r\n\r\n    currentChar() {\r\n        return this.code[this.pos]\r\n    }\r\n\r\n    remaining(length = undefined) {\r\n        return this.code.substring(this.pos, Math.min(length ? this.pos + length : this.code.length - 1, this.code.length - 1))\r\n    }\r\n\r\n    next(length = 1) {\r\n        return this.code.substring(Math.min(this.pos + 1, this.code.length - 1), Math.min(this.pos + 1 + length, this.code.length - 1))\r\n    }\r\n\r\n    finished() {\r\n        return this.pos >= this.code.length\r\n    }\r\n\r\n    absPos() {\r\n        return this.pos + this.startingAt - /* last move */ 1 \r\n    }\r\n}\r\n\r\nclass Parser {\r\n    constructor() {    \r\n        this.steps = 0\r\n        this.maxSteps = 1000000 // to prevent infinite loops\r\n        this.fcount = 0 // counter for function IDs\r\n    }\r\n\r\n    parse(code) {\r\n        this.steps = 0\r\n        return this.parseBlock(new Source(code))\r\n    }\r\n\r\n    parseBlock(source) {\r\n        const statements = []\r\n        while (!source.finished()) {\r\n            const stm = this.parseStatement(source)\r\n            if (stm) statements.push(stm)\r\n        }\r\n        return new Block(statements, source.absPos())\r\n    }\r\n\r\n    parseStatement(source) {\r\n        this._stepper()\r\n\r\n        let token = ''\r\n        \r\n        let expecting = null\r\n        let inAssignment = false\r\n\r\n        const openDefinitions = {\r\n            arrays: 0,  // [\r\n            objects: 0, // {\r\n        }\r\n\r\n        for (; !source.finished(); source.move()) {\r\n            this._stepper()\r\n\r\n            const c = source.currentChar()\r\n\r\n            // comment\r\n            if (isComment(source.remaining())) {\r\n                consumeUntil(source, '\\\\n')\r\n                continue\r\n            }\r\n            \r\n            // consume the whole string to prevent space-ignoring\r\n            if (!inAssignment && isStringStarting(c)) {\r\n                let cc = c\r\n                do {\r\n                    token += cc\r\n                    source.move()\r\n                    cc = source.currentChar()\r\n                } while (!source.finished() && !isStringEnding(cc, c))\r\n            }\r\n            \r\n            // ignore spaces (except space between numbers)\r\n            if (!expecting && isSpace(c) && isSpace(token.charAt(token.length - 1))) continue\r\n\r\n            if (expecting && c !== expecting) {\r\n                throw new LangParseError(Errors.EXPECTED_SYMBOL, source.absPos(), expecting, c)\r\n            }\r\n            if (expecting === '=' && c === expecting) {\r\n                inAssignment = true\r\n                expecting = null\r\n                continue\r\n            }\r\n\r\n            if ('[' === c) openDefinitions.arrays++\r\n            if (']' === c) openDefinitions.arrays--\r\n            if ('{' === c) openDefinitions.objects++\r\n            if ('}' === c) openDefinitions.objects--\r\n\r\n            // end of the statement\r\n            if (isStatementSeparator(c) && !openDefinitions.arrays && !openDefinitions.objects) {\r\n                source.move()\r\n                break\r\n            }\r\n\r\n            // while\r\n            if (isWhileDef(source.remaining())) {\r\n                if (token.length) {\r\n                    throw new LangParseError(Errors.UNEXPECTED_SYMBOL, source.absPos(), token)\r\n                }\r\n                consumeSpaces(source)\r\n                consumeUntil(source, '\\\\s')\r\n                const def = this.parseWhile(source)\r\n                consumeSpaces(source, true)\r\n                if (!isStatementSeparator(source.currentChar())) throw new LangParseError(Errors.EXPECTED_STATEMENT_END, source.absPos())\r\n                return def\r\n            }\r\n\r\n            // if\r\n            if (isIfDef(source.remaining())) {\r\n                if (token.length) {\r\n                    throw new LangParseError(Errors.UNEXPECTED_SYMBOL, token)\r\n                }\r\n                consumeSpaces(source)\r\n                consumeUntil(source, '\\\\s')\r\n                const def = this.parseIf(source)\r\n                consumeSpaces(source, true)\r\n                if (isElseDef(source.remaining())) {\r\n                    consumeSpaces(source)\r\n                    consumeUntil(source, '\\\\s')\r\n                    def.elseBody = this.parseBody(source)\r\n                    consumeSpaces(source, true)\r\n                }\r\n                if (!isStatementSeparator(source.currentChar())) throw new LangParseError(Errors.EXPECTED_STATEMENT_END, source.absPos())\r\n                if (!def.elseBody) {\r\n                    consumeSpaces(source)\r\n                    if (isElseDef(source.remaining())) {\r\n                        consumeSpaces(source)\r\n                        consumeUntil(source, '\\\\s')\r\n                        def.elseBody = this.parseBody(source)\r\n                        consumeSpaces(source, true)\r\n                        if (!isStatementSeparator(source.currentChar())) throw new LangParseError(Errors.EXPECTED_STATEMENT_END, source.absPos())\r\n                    }\r\n                }\r\n                return def\r\n            }\r\n\r\n            if (':' === c && !openDefinitions.objects) {    // assignment starting\r\n                if (!(token.trim().length)) throw new LangParseError(Errors.UNEXPECTED_SYMBOL, source.absPos(), c)\r\n                if (isKeyword(token.trim())) throw new LangParseError(Errors.UNEXPECTED_KEYWORD, source.absPos(), c)\r\n                expecting = '='\r\n            } else\r\n            if (inAssignment) {  // variable assignment                \r\n                const value = this.parseExpression(source, openDefinitions)\r\n                token = token.trim()\r\n                if (isIdentifier(token)) {\r\n                    const variable = new Variable(token, source.absPos())\r\n                    const assignment = new Assignment(variable, value, source.absPos())\r\n                    return assignment\r\n                } else {\r\n                    const exp = this.parseExpression(new Source(token, source.absPos() - token.length), {})\r\n                    if (!exp || exp.parts.some(p => p.isOperator && !p.isAccess))\r\n                        throw new LangParseError(Errors.INVALID_IDENTIFIER, source.absPos(), token)\r\n                    const assignment = new Assignment(exp, value, source.absPos())\r\n                    return assignment\r\n                }\r\n            }\r\n            else {\r\n                token += c\r\n            }\r\n        }\r\n\r\n        // statement is an expression\r\n        if (token.length) {\r\n            const exp = this.parseExpression(new Source(token, source.absPos() - token.length), {})\r\n            return exp\r\n        }\r\n    }\r\n\r\n    parseExpression(source, openDefinitions, inGrouping = null) {\r\n        this._stepper()\r\n\r\n        const parts = []\r\n\r\n        while (!source.finished()) {\r\n            this._stepper()\r\n\r\n            const c = source.currentChar()\r\n\r\n            // spaces\r\n            if (isSpace(c)) {\r\n                source.move()\r\n                continue\r\n            }\r\n\r\n            // end of the statement\r\n            if (isStatementSeparator(c) || ')' === c || ']' === c || '}' === c || ',' === c) {\r\n                if ((')' === c || ']' === c || '}' === c) && ((!inGrouping && inGrouping !== c) || !parts.length)) {\r\n                    throw new LangParseError(Errors.UNEXPECTED_SYMBOL, source.absPos(), c)\r\n                }\r\n                // return the list of tokens and operators\r\n                if (parts.length) {\r\n                    if (parts[parts.length - 1].isOperator && !parts[parts.length - 1].isAccess) {\r\n                        throw new LangParseError(Errors.UNEVEN_OPERATORS, source.absPos())\r\n                    }\r\n                    return new Expression(parts, source.absPos())\r\n                }\r\n                source.move()\r\n                continue\r\n            }\r\n\r\n            // function defition\r\n            if (isFunctionDef(source.remaining())) {\r\n                if (parts.length && !parts[parts.length - 1].isOperator) {\r\n                    throw new LangParseError(Errors.UNEXPECTED_SYMBOL, source.absPos(), c)\r\n                }\r\n                const fn = this.parseFunction(source)\r\n                parts.push(fn)\r\n                continue\r\n            }\r\n\r\n            // object definition\r\n            if ('{' === c) {\r\n                if (!leftOperatorExpected()) {\r\n                    throw new LangParseError(Errors.UNEXPECTED_SYMBOL, source.absPos(), c)\r\n                }\r\n                source.move()\r\n                const attributes = this.readAttributes(source, ')')\r\n\r\n                consumeSpaces(source)\r\n                if ('}' === source.currentChar()) {\r\n                    const obj = new LangObject(attributes, source.absPos())\r\n                    // set the self reference\r\n                    for (let attr of Object.values(attributes)) {\r\n                        if (attr.isObject) {\r\n                            attr.parent = obj\r\n                        }\r\n                    }\r\n                    parts.push(obj)                    \r\n                    source.move()\r\n                    openDefinitions.objects--\r\n                    continue\r\n                }\r\n                throw new LangParseError(Errors.UNEXPECTED_SYMBOL, source.absPos(), source.currentChar(), '}')\r\n            }\r\n\r\n            // grouping or a function call\r\n            if ('(' === c) {\r\n                source.move()\r\n                if (rightOperatorExpected()) {    // a function call\r\n                    const params = this.readList(source, ')')\r\n                    consumeSpaces(source)\r\n    \r\n                    if (')' === source.currentChar()) {\r\n                        var call = new FunctionCall(params, source.absPos())\r\n                        parts.push(call)\r\n                        source.move()\r\n                    } else {\r\n                        throw new LangParseError(Errors.UNEXPECTED_SYMBOL, source.absPos(), source.currentChar(), ')')\r\n                    }\r\n                } else {    // grouping\r\n                    const exp = this.parseExpression(source, openDefinitions, true)\r\n                    parts.push(exp)\r\n                    consumeSpaces(source)\r\n                    if (')' !== source.currentChar()) throw new LangParseError(Errors.EXPECTED_SYMBOL, source.absPos(), ')')\r\n                    source.move()\r\n                }\r\n                continue\r\n            }\r\n\r\n            // object attribute access\r\n            if ('.' === c && rightOperatorExpected()) {\r\n                source.move()\r\n                const attrName = this.readIdentifier(source)               \r\n                parts.push(new ObjectAccess(attrName, source.absPos()))\r\n                continue\r\n            }\r\n\r\n            // array\r\n            if ('[' === c) {\r\n                source.move()\r\n                if (rightOperatorExpected()) { // array access\r\n                    const indexes = this.readList(source, ']')\r\n                    consumeSpaces(source)\r\n\r\n                    if (!indexes.length) throw new LangParseError(Errors.ARRAY_INDEX_MISSING, source.absPos())\r\n\r\n                    if (']' === source.currentChar()) {\r\n                        if (indexes.some(i => !i.isExpression || !i.parts.length)) throw new LangParseError(Errors.ARRAY_INDEX_NOT_NUMBER, source.absPos())\r\n                        source.move()\r\n                        parts.push(new ArrayAccess(indexes, source.absPos()))\r\n                    } else {\r\n                        throw new LangParseError(Errors.UNEXPECTED_SYMBOL, source.absPos(), source.currentChar(), ']')\r\n                    }\r\n                } else {    // array definition\r\n                    const elements = this.readList(source, ']')\r\n                    consumeSpaces(source)\r\n    \r\n                    if (']' === source.currentChar()) {\r\n                        parts.push(new LangArray(elements, source.absPos()))\r\n                        source.move()\r\n                        openDefinitions.arrays--\r\n                    } else {\r\n                        throw new LangParseError(Errors.UNEXPECTED_SYMBOL, source.absPos(), source.currentChar(), ']')\r\n                    }\r\n                }\r\n                continue\r\n            }\r\n\r\n            // operators\r\n            if (leftOperatorExpected()) {\r\n                if (UniOperators.includes(c)) {\r\n                    parts.push(new UniOperator(c, source.absPos()))\r\n                    source.move()\r\n                    if (isSpace(source.currentChar())) throw new LangParseError(Errors.UNEXPECTED_SYMBOL, source.absPos(), source.currentChar())\r\n                    continue\r\n                }\r\n            } else \r\n            if (rightOperatorExpected()) {\r\n                const next2 = source.remaining(2)\r\n                if (BiOperators.includes(next2)) {\r\n                    parts.push(new BiOperator(next2, source.absPos()))\r\n                    source.move(next2.length)\r\n                    continue\r\n                }\r\n                if (BiOperators.includes(c)) {\r\n                    parts.push(new BiOperator(c, source.absPos()))\r\n                    source.move()\r\n                    continue\r\n                }\r\n            }\r\n\r\n            if (parts.length && (!parts[parts.length - 1].isOperator || parts[parts.length - 1].isAccess)) \r\n                throw new LangParseError(Errors.UNEXPECTED_SYMBOL, source.absPos(), source.currentChar())\r\n\r\n            const exp = this.parseMemberExpression(source)\r\n            parts.push(exp)\r\n        }\r\n\r\n        function leftOperatorExpected() {\r\n            return !parts.length || (parts[parts.length - 1].isOperator && !parts[parts.length - 1].isAccess)\r\n        }\r\n\r\n        function rightOperatorExpected() {\r\n            return parts.length && (!parts[parts.length - 1].isOperator || parts[parts.length - 1].isAccess)\r\n        }\r\n    }\r\n\r\n    parseMemberExpression(source) {\r\n        this._stepper()\r\n\r\n        let token = ''\r\n\r\n        for (; !source.finished(); source.move()) {\r\n            this._stepper()\r\n            \r\n            const c = source.currentChar()\r\n\r\n            // token ends\r\n            if (isExpressionSeparator(c)) {\r\n                if ('.' === c && /^(0|([1-9][0-9]*))$/.test(token) && /[0-9]/.test(source.next())) { // float number\r\n                    token += c\r\n                    continue\r\n                }\r\n                if (Keywords.TRUE.includes(token.toLowerCase())) {\r\n                    return new LangBoolean(true, source.absPos())\r\n                }\r\n                if (Keywords.FALSE.includes(token.toLowerCase())) {\r\n                    return new LangBoolean(false, source.absPos())\r\n                }\r\n                if (isNumeric(token)) {\r\n                    return new LangNumber(token.includes('.') ? parseFloat(token) : parseInt(token), source.absPos())\r\n                } \r\n                if (isIdentifier(token) || '$' === token) {\r\n                    return new VarReference(token, source.absPos())\r\n                }\r\n                throw new LangParseError(Errors.UNEXPECTED_SYMBOL, source.absPos(), token)\r\n            }\r\n\r\n            if (isStringStarting(c)) {\r\n                source.move()\r\n                return new LangString(this.readString(source, c), source.absPos())\r\n            }\r\n\r\n            token += c\r\n        }\r\n    }\r\n\r\n    readList(source, groupingCloseChar) {\r\n        consumeSpaces(source)\r\n        if (groupingCloseChar === source.currentChar()) {\r\n            return []\r\n        } else {    // multiple params\r\n            const params = []\r\n            do {\r\n                const value = this.parseExpression(source, {}, groupingCloseChar)\r\n                params.push(value)\r\n\r\n                consumeSpaces(source)\r\n\r\n            } while(',' === source.currentChar() && !source.finished())\r\n\r\n            return params\r\n        }\r\n    }\r\n\r\n    readAttributes(source) {\r\n        consumeSpaces(source)\r\n        if ('}' === source.currentChar()) {\r\n            return {}\r\n        } else {    // multiple attributes\r\n            const attributes = {}\r\n            let first = true\r\n            do {\r\n                if (!first) {\r\n                    source.move()\r\n                }\r\n                first = false\r\n                consumeSpaces(source)\r\n\r\n                const name = this.readIdentifier(source)\r\n                if (attributes[name]) {\r\n                    throw new LangParseError(Errors.ATTRIBUTE_ALREADY_EXISTS, source.absPos(), name)\r\n                }\r\n                consumeSpaces(source)\r\n\r\n                if (':' !== source.currentChar()) {\r\n                    throw new LangParseError(Errors.EXPECTED_SYMBOL, source.absPos(), ':', source.currentChar())\r\n                }\r\n                source.move()\r\n\r\n                const value = this.parseExpression(source, {}, '}')\r\n                attributes[name] = value\r\n\r\n                consumeSpaces(source)\r\n\r\n            } while(',' === source.currentChar() && !source.finished())\r\n\r\n            return attributes\r\n        }\r\n    }\r\n\r\n    parseWhile(source) {\r\n        const condCode = this.readUntilBodyOpens(source)\r\n        const cond = this.parseExpression(new Source(condCode, source.absPos() - condCode.length), {}, null)\r\n        const body = this.parseBody(source)\r\n        return new While(cond, body, source.absPos())\r\n    }\r\n\r\n    parseIf(source) {\r\n        const condCode = this.readUntilBodyOpens(source)\r\n        const cond = this.parseExpression(new Source(condCode, source.absPos() - condCode.length), {}, null)\r\n        const body = this.parseBody(source)\r\n        return new If(cond, body, null, source.absPos())\r\n    }\r\n\r\n    parseFunction(source) {\r\n        const args = this.readArguments(source)\r\n        const body = this.parseBody(source)\r\n        return new LangFunction(body, args, ++this.fcount, source.absPos())\r\n    }\r\n\r\n    readArguments(source) {\r\n        consumeSpaces(source)\r\n\r\n        if ('(' !== source.currentChar()) {\r\n            throw new LangParseError(Errors.EXPECTED_SYMBOL, source.absPos(), '(', source.currentChar())\r\n        }       \r\n        source.move()\r\n        consumeSpaces(source) \r\n\r\n        const args = []\r\n        let first = true\r\n        while((',' === source.currentChar() || ')' !== source.currentChar()) && !source.finished()) {\r\n            if (!first) source.move()\r\n            first = false\r\n\r\n            const name = this.readIdentifier(source)\r\n            args.push(name)\r\n\r\n            consumeSpaces(source)\r\n        }\r\n\r\n        if (')' !== source.currentChar()) {\r\n            throw new LangParseError(Errors.EXPECTED_SYMBOL, source.absPos(), ')', source.currentChar())\r\n        }\r\n        source.move()\r\n        return args\r\n    }\r\n\r\n    parseBody(source) {\r\n        consumeSpaces(source)\r\n\r\n        if ('{' !== source.currentChar()) {\r\n            throw new LangParseError(Errors.EXPECTED_SYMBOL, source.absPos(), '{', source.currentChar())\r\n        }\r\n\r\n        source.move()\r\n        consumeSpaces(source)\r\n\r\n        let body = ''\r\n        let openQuotings = 0\r\n        while((openQuotings || '}' !== source.currentChar()) && !source.finished()) {\r\n            const c = source.currentChar()\r\n            body += c\r\n            source.move()\r\n\r\n            if ('{' === c) openQuotings++\r\n            if ('}' === c) openQuotings--\r\n        } \r\n\r\n        if ('}' !== source.currentChar()) {\r\n            throw new LangParseError(Errors.EXPECTED_SYMBOL, source.absPos(), '}', source.currentChar())\r\n        }\r\n        source.move()\r\n\r\n        if (/^\\s*$/.test(body)) {\r\n            return new Block([new LangVoid(source.absPos())], source.absPos())\r\n        }\r\n\r\n        const block = this.parseBlock(new Source(body, source.absPos() - body.length))\r\n        return block\r\n    }\r\n    \r\n    readString(source, quoting) {\r\n        let token = ''\r\n        for (; !source.finished(); source.move()) {\r\n            const c = source.currentChar()\r\n\r\n            if (isStringEnding(c, quoting)) {\r\n                source.move()\r\n                return token\r\n            }\r\n            token += c\r\n        }\r\n        throw new LangParseError(Errors.UNEXPECTED_END, source.absPos())\r\n    }\r\n\r\n    readIdentifier(source) {\r\n        let token = ''\r\n        for (; !source.finished(); source.move()) {\r\n            const c = source.currentChar()\r\n            if (isSpace(c)) continue\r\n            if (!new RegExp(`^${RE_IDENTIFIER}$`).test(token + c)) break                \r\n            token += c\r\n        }\r\n        if (token) return token\r\n        throw new LangParseError(Errors.EXPECTED_IDENTIFIER, source.absPos())\r\n    }\r\n\r\n    readUntilBodyOpens(source) {\r\n        let curlies = 0\r\n        let quotations = 0\r\n        let token = ''\r\n        for (; !source.finished(); source.move()) {\r\n            const c = source.currentChar()\r\n            if (isStringStarting(c)) {\r\n                token += this.readString(source, c)\r\n                continue\r\n            }\r\n            if ('(' === c) quotations++\r\n            else\r\n            if (')' === c) quotations--\r\n            else\r\n            if ('{' === c) {\r\n                if (!curlies && !quotations) break\r\n                curlies++\r\n            } else \r\n            if ('}' === c) {\r\n                curlies--\r\n                if (curlies < 0) throw new LangParseError(Errors.UNEXPECTED_SYMBOL, source.absPos(), c)\r\n            }\r\n            token += c\r\n        }\r\n        if (token) return token\r\n    }\r\n\r\n    _stepper() {\r\n        this.steps++\r\n        if (this.steps > this.maxSteps) throw new LangParseError(Errors.PARSER_STEPS_EXCEEDED, source.absPos())\r\n    }\r\n}\r\n\r\nfunction consumeSpaces(source, stopAtNewLine = false) {\r\n    while (!source.finished() && /\\s/.test(source.currentChar()) && (!stopAtNewLine || '\\n' !== source.currentChar())) source.move()\r\n}\r\n\r\nfunction consumeUntil(source, untilChar) {\r\n    const re = new RegExp(untilChar)\r\n    while (!source.finished() && !re.test(source.currentChar())) source.move()\r\n}\r\n\r\nfunction isNumeric(str) {\r\n    return !isNaN(str) && !isNaN(parseFloat(str))\r\n}\r\n\r\nfunction isKeyword(str) {\r\n    str = str.toLowerCase()\r\n    return Object.values(Keywords).some(k => k.includes(str)) ||  Keywords.WHILE.includes(str) || Keywords.IF.includes(str)\r\n}\r\n\r\nfunction isSpace(c) {\r\n    return '\\n' !== c && /\\s+/g.test(c)\r\n}\r\n\r\nfunction isExpressionSeparator(c) {\r\n    return isSpace(c) || isStatementSeparator(c) \r\n        || '(' === c || ')' === c || '[' === c || ']' === c || '{' === c || '}' === c \r\n        || '.' === c || ',' === c\r\n        || BiOperators.some(op => op.startsWith(c)) || UniOperators.some(op => op.startsWith(c))\r\n}\r\n\r\nfunction isStatementSeparator(c) {\r\n    return '\\n' === c || ';' === c\r\n}\r\n\r\nfunction isStringStarting(c) {\r\n    return c === '\"' || c === '“' || c === '”' || c === \"'\"\r\n}\r\n\r\nfunction isStringEnding(c, quoting) {\r\n    return quoting === c || (c === '”' && quoting === '“')\r\n}\r\n\r\nfunction isIdentifier(token) {\r\n    return new RegExp(`^${RE_IDENTIFIER}$`).test(token)\r\n}\r\n\r\nfunction isFunctionDef(remaining) {\r\n    return new RegExp(`^${RE_FUNCTION}`).test(remaining)\r\n}\r\n\r\nfunction isWhileDef(remaining) {\r\n    return Keywords.WHILE.some(k => new RegExp(`^\\\\s*${k}\\\\s(.*)\\\\s{`).test(remaining)) \r\n}\r\n\r\nfunction isIfDef(remaining) {\r\n    return Keywords.IF.some(k => new RegExp(`^\\\\s*${k}\\\\s(.*)\\\\s{`).test(remaining))\r\n}\r\n\r\nfunction isElseDef(remaining) {\r\n    return Keywords.ELSE.some(k => new RegExp(`^\\\\s*${k}\\\\s+{`).test(remaining)) \r\n}\r\n\r\nfunction isComment(remaining) {\r\n    return new RegExp('^//').test(remaining)\r\n}\r\n\r\nmodule.exports = Parser","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(17);\n"],"names":["root","factory","exports","module","define","amd","this","Types","Errors","Interruptions","InterpretError","LangInterpretError","Interrupt","LangInterrupt","Void","LangVoid","VariablesScope","constructor","imports","variables","Map","parent","Object","entries","forEach","k","v","set","hasVariable","name","has","get","hasAttribute","getVariable","self","attribute","setVariable","value","scoped","found","scope","pushScope","newScope","popScope","copy","FunctionExecution","funcExp","params","isFunctionExecution","ExecutionStepper","maxSteps","isInterruptedFn","steps","step","source","USER_SUSSPEND","EXECUTION_STEPS_EXCEEDED","reset","controls","stepper","isInterrupted","async","ast","executeBlock","block","result","stm","statements","executeStatement","isExpression","executeExpression","isAssignment","executeAssignment","isWhile","executeWhile","isIf","executeIf","expression","assignNewValue","parts","EMPTY_EXPRESSION","executeExpressionParts","index","findFirstOp","left","slice","type","BOOLEAN","WRONG_BI_OPERATOR_SUBJECTS","right","assignApplied","findNextOp","op","isObjectAccess","isArrayAccess","ACCESS_OPERATOR_EXPECTED","isUni","a","executeExpressionPart","WRONG_UNI_OPERATOR_SUBJECT","apply","removeElementAt","isBi","b","UNMATCHING_BI_OPERATOR_SUBJECTS","ARRAY","EXPECTED_ARRAY","protectedAttributes","PROTECTED_FROM_MODIFICATION","indexes","Promise","all","map","i","isLastOperator","ATTRIBUTE_NOT_FOUND","o","isObject","isFunction","EXPECTED_OBJECT","isCall","UNKNOWN_OPERATOR","e","isLangError","UNKNOWN_ERROR","isInterpretError","id","arg1","arg2","maxPrecedence","Number","MIN_SAFE_INTEGER","length","isOperator","precedence","arr","filter","_","includes","expressionPart","isReference","varName","UNREFERENCED_VARIABLE","func","p","executeFunctionCall","OBJECT","obj","keys","f","isNative","call","args","FUNC_ARGUMENTS_MISHMASH","variablesBak","arg","body","assignment","WRONG_ASSIGNMENT","isVariable","variable","protected","WRONG_ASSIGNEE_TYPE","whileStm","condition","WRONG_CONDITION","cond","WRONG_CONDITION_VALUE","ifStm","elseBody","SizeKeywords","INVALID_UNI_OPERATOR","INVALID_BI_OPERATOR","UNEXPECTED_END","UNEXPECTED_SYMBOL","EXPECTED_SYMBOL","UNEXPECTED_KEYWORD","INVALID_IDENTIFIER","UNEVEN_OPERATORS","EXPECTED_FUNCTION","EXPECTED_STATEMENT_END","ARRAY_INDEX_NOT_NUMBER","ARRAY_INDEX_MISSING","ARRAY_INDEX_OUT_BOUNDS","ATTRIBUTE_ALREADY_EXISTS","ELEMENT_NOT_FOUND","OPERATOR_NOT_APPLICABLE","EXPECTED_IDENTIFIER","READONLY_ATTRIBUTE","PARSER_STEPS_EXCEEDED","DIVISION_BY_ZERO","NUMBER","STRING","FUNCTION","VOID","LangError","Error","pos","super","details","message","position","Statement","Operator","LangObject","eq","LangNativeFunction","x","LangBoolean","aKeys","bKeys","areObjectsEqual","ne","newValue","isProtected","LangValueObject","LangNumber","mult","div","mod","plus","minus","lt","le","gt","ge","neg","sum","reduce","c","round","Math","floor","ceil","LangString","concat","s","and","or","xor","nand","LangArray","element","toLowerCase","Keywords","TRUE","FALSE","IF","ELSE","WHILE","Block","Assignment","While","If","bodyElse","Expression","Variable","UniOperator","getPrecedence","fn","getFn","BiOperator","ArrayAccess","isAccess","ObjectAccess","attrName","FunctionCall","VarReference","ParseError","isParseError","isLangInterruption","String","Boolean","Array","Function","funcId","g","NativeFunction","lang","Parser","Interpret","LudolfC","parser","interpret","code","parse","execute","line","col","max","lineAndCol","LangParseError","LangFunction","UniOperators","BiOperators","RE_NATIONAL_CHARS","RE_IDENTIFIER","RE_FUNCTION","Source","startingAt","move","currentChar","remaining","substring","min","next","finished","absPos","consumeSpaces","stopAtNewLine","test","consumeUntil","untilChar","re","RegExp","isKeyword","str","values","some","isSpace","isExpressionSeparator","isStatementSeparator","startsWith","isStringStarting","isStringEnding","quoting","isIdentifier","token","isWhileDef","isIfDef","isElseDef","fcount","parseBlock","parseStatement","push","_stepper","expecting","inAssignment","openDefinitions","arrays","objects","cc","charAt","def","parseWhile","parseIf","parseBody","parseExpression","trim","exp","inGrouping","parseFunction","leftOperatorExpected","attributes","readAttributes","attr","rightOperatorExpected","readList","readIdentifier","elements","next2","parseMemberExpression","isNaN","parseFloat","parseInt","readString","groupingCloseChar","first","condCode","readUntilBodyOpens","readArguments","openQuotings","curlies","quotations","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}