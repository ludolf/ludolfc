{"version":3,"file":"ludolfc.js","mappings":"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","sources":["webpack://ludolfc/webpack/universalModuleDefinition","webpack://ludolfc/./src/interpreter.js","webpack://ludolfc/./src/lang.js","webpack://ludolfc/./src/ludolfc.js","webpack://ludolfc/./src/parser.js","webpack://ludolfc/webpack/bootstrap","webpack://ludolfc/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ludolfc\"] = factory();\n\telse\n\t\troot[\"ludolfc\"] = factory();\n})(this, () => {\nreturn ","const { \r\n    Types,\r\n    Errors,\r\n    Interruptions,\r\n    InterpretError: LangInterpretError,\r\n    Interrupt: LangInterrupt,\r\n    Void: LangVoid } = require('./lang')\r\n    \r\nclass Interpret {\r\n    constructor(imports = {}, controls, maxSteps = 100000) {\r\n        this.imports = imports\r\n        this.stepper = new ExecutionStepper(maxSteps, controls && controls.isInterrupted) // to prevent infinite loops        \r\n    }\r\n\r\n    async execute(ast) {\r\n        this.variables = new VariablesScope(this.imports)\r\n        this.stepper.reset()\r\n        return await this.executeBlock(ast, false)\r\n    }\r\n\r\n    async executeBlock(block, newScope = true) {        \r\n        if (newScope) this.variables = this.variables.pushScope()\r\n        let result\r\n        for (let stm of block.statements) {\r\n            result = await this.executeStatement(stm)\r\n        }\r\n        if (newScope) this.variables = this.variables.popScope()\r\n        return result ? result : new LangVoid()\r\n    }\r\n\r\n    async executeStatement(stm) {\r\n        this.stepper.step(stm.source)\r\n        return stm.isExpression ? await this.executeExpression(stm) :\r\n               stm.isAssignment ? await this.executeAssignment(stm) :\r\n               stm.isWhile ? await this.executeWhile(stm) :\r\n               stm.isIf ? await this.executeIf(stm) : \r\n               stm\r\n    }\r\n\r\n    async executeExpression(expression, assignNewValue = null) {\r\n        this.stepper.step(expression.source)\r\n        if (!expression.parts) throw new LangInterpretError(Errors.EMPTY_EXPRESSION, expression.source)\r\n        let parts = [...expression.parts]\r\n        return await this.executeExpressionParts(parts, assignNewValue)\r\n    }\r\n\r\n    async executeExpressionParts(parts, assignNewValue = null) {\r\n        // logical operators short circuit\r\n        const executeShortCircuitExpressionParts = async (op, parts, assignNewValue, shouldShortCircuit) => {\r\n            const index = findFirstOp(op)\r\n            if (index) {\r\n                const left = await this.executeExpressionParts(parts.slice(0, index), assignNewValue)\r\n                if (left.type !== Types.BOOLEAN) throw new LangInterpretError(Errors.WRONG_BI_OPERATOR_SUBJECTS, left.source)\r\n                if (shouldShortCircuit(left.value)) return left\r\n                const right = await this.executeExpressionParts(parts.slice(index + 1), assignNewValue)\r\n                if (right.type !== Types.BOOLEAN) throw new LangInterpretError(Errors.WRONG_BI_OPERATOR_SUBJECTS, right.source)\r\n                return right\r\n            }\r\n        }\r\n        const expOr = await executeShortCircuitExpressionParts('|', parts, assignNewValue, value => value)\r\n        if (expOr) return expOr\r\n        const expAnd = await executeShortCircuitExpressionParts('&', parts, assignNewValue, value => !value)\r\n        if (expAnd) return expAnd\r\n\r\n        // left to right by precendence\r\n        let index, assignApplied = false\r\n        while ((index = findNextOp()) > -1) {\r\n            const op = parts[index]\r\n\r\n            if (assignNewValue && !op.isObjectAccess && !op.isArrayAccess) throw new LangInterpretError(Errors.ACCESS_OPERATOR_EXPECTED, op.source)\r\n\r\n            try {\r\n                if (op.isUni) {\r\n                    const a = await this.executeExpressionPart(parts[index + 1])\r\n                    if (!a.type) throw new LangInterpretError(Errors.WRONG_UNI_OPERATOR_SUBJECT, op.source)\r\n                    parts[index] = op.apply(a)\r\n                    parts = removeElementAt(parts, index + 1)\r\n                } else\r\n                if (op.isBi) {\r\n                    const a = await this.executeExpressionPart(parts[index - 1])\r\n                    const b = await this.executeExpressionPart(parts[index + 1])\r\n                    if (!a.type || !b.type) throw new LangInterpretError(Errors.WRONG_BI_OPERATOR_SUBJECTS, op.source)\r\n                    if (a.type !== b.type && !(op.isAddition && Types.STRING === a.type && b.isPrimitive)) throw new LangInterpretError(Errors.UNMATCHING_BI_OPERATOR_SUBJECTS, op.source)\r\n                    parts[index] = op.apply(a, b)\r\n                    parts = removeElementAt(parts, index - 1, index + 1)\r\n                } else\r\n                if (op.isArrayAccess) {\r\n                    const a = await this.executeExpressionPart(parts[index - 1])\r\n                    if (Types.ARRAY !== a.type) throw new LangInterpretError(Errors.EXPECTED_ARRAY, op.source)\r\n                    if (assignNewValue && a.protectedAttributes()) throw new LangInterpretError(Errors.PROTECTED_FROM_MODIFICATION, op.source)\r\n                    const indexes = await Promise.all(op.indexes.map(i => this.executeExpressionPart(i)))\r\n                    parts[index] = op.apply(a, indexes, (assignNewValue && isLastOperator()) ? assignNewValue : null)\r\n                    if (!parts[index]) throw new LangInterpretError(Errors.ATTRIBUTE_NOT_FOUND, op.source)\r\n                    parts = removeElementAt(parts, index - 1)\r\n                    assignApplied = true\r\n                } else\r\n                if (op.isObjectAccess) {\r\n                    const o = await this.executeExpressionPart(parts[index - 1])\r\n                    if (!o.isObject && !o.isFunction) throw new LangInterpretError(Errors.EXPECTED_OBJECT, op.source)\r\n                    if (assignNewValue && o.protectedAttributes()) throw new LangInterpretError(Errors.PROTECTED_FROM_MODIFICATION, op.source)\r\n                    parts[index] = op.apply(o, (assignNewValue && isLastOperator()) ? assignNewValue : null)\r\n                    if (!parts[index]) throw new LangInterpretError(Errors.ATTRIBUTE_NOT_FOUND, op.source)\r\n                    parts = removeElementAt(parts, index - 1)\r\n                    assignApplied = true\r\n                } else \r\n                if (op.isCall) {\r\n                    parts[index] = new FunctionExecution(parts[index - 1], op.params)  // to prevent immediate execution\r\n                    parts = removeElementAt(parts, index - 1)\r\n                }\r\n                else throw new LangInterpretError(Errors.UNKNOWN_OPERATOR, op.source)\r\n\r\n            } catch (e) {   // LangError could be raised from applying the operator in lang.js\r\n                if (e.isLangError) {\r\n                    if (!e.isInterpretError) throw new LangInterpretError(e.id, op.source, e.arg1, e.arg2)\r\n                } else {\r\n                    throw new LangInterpretError(Errors.UNKNOWN_ERROR, op.source, e)\r\n                }\r\n                throw e\r\n            }\r\n        }\r\n\r\n        if (assignNewValue && !assignApplied) throw new LangInterpretError(Errors.ACCESS_OPERATOR_EXPECTED, parts[0].source)\r\n\r\n        return await this.executeExpressionPart(parts[0]) // parts are reduced to a single result\r\n\r\n        function findNextOp() { // returns an index of the next part\r\n            let index = -1\r\n            let maxPrecedence = Number.MIN_SAFE_INTEGER\r\n            for (let i = 0; i < parts.length; i++) {\r\n                const op = parts[i]\r\n                if (!op.isOperator) continue\r\n                if (maxPrecedence < op.precedence || (op.isUni && maxPrecedence === op.precedence)) {\r\n                    index = i\r\n                    maxPrecedence = op.precedence\r\n                }\r\n            }\r\n            return index\r\n        }\r\n\r\n        function removeElementAt(arr, ...indexes) {\r\n            return arr.filter((_, i) => !indexes.includes(i))\r\n        }\r\n\r\n        function isLastOperator() {\r\n            return parts.length === 2\r\n        }\r\n\r\n        function findFirstOp(op) {\r\n            for (let i = 0; i < parts.length; i++)\r\n                if (parts[i].isBi && parts[i].op === op) return i\r\n        }\r\n    }\r\n\r\n    async executeExpressionPart(expressionPart) {\r\n        this.stepper.step(expressionPart.source)\r\n        \r\n        if (expressionPart.isReference) {\r\n            if (!this.variables.hasVariable(expressionPart.varName)) throw new LangInterpretError(Errors.UNREFERENCED_VARIABLE, expressionPart.source - expressionPart.varName.length, expressionPart.varName)\r\n            return this.variables.getVariable(expressionPart.varName)\r\n        }\r\n        if (expressionPart.isFunctionExecution) {\r\n            const func = await this.executeExpressionPart(expressionPart.funcExp)\r\n            const params = await Promise.all(expressionPart.params.map(p => this.executeExpressionPart(p)))\r\n            return await this.executeFunctionCall(func, params)\r\n        }\r\n        if (expressionPart.isExpression) {\r\n            return await this.executeExpression(expressionPart)\r\n        }\r\n        if (Types.ARRAY === expressionPart.type) {\r\n            const arr = expressionPart.value\r\n            for (let i = 0; i < arr.length; i++) {\r\n                arr[i] = await this.executeExpressionPart(arr[i])\r\n            }\r\n        } else\r\n        if (Types.OBJECT === expressionPart.type) {\r\n            const obj = expressionPart.value\r\n            for (let k of Object.keys(obj)) {\r\n                obj[k] = await this.executeExpressionPart(obj[k])\r\n                if (obj[k].isObject || obj[k].isFunction) obj[k].parent = expressionPart\r\n            }\r\n        }\r\n        if (expressionPart.isFunction && !expressionPart.scope) {\r\n            expressionPart.scope = this.variables.copy()            \r\n        }\r\n        return expressionPart\r\n    }\r\n\r\n    async executeFunctionCall(f, params) {\r\n        if (f.isNative) {\r\n            const result = await f.call(...params)\r\n            return !result ? new LangVoid() : result\r\n        }\r\n\r\n        if ((!params && f.args) || params.length !== f.args.length) throw new LangInterpretError(Errors.FUNC_ARGUMENTS_MISHMASH, f.source)\r\n        // scoped variables\r\n        let i = 0\r\n        const variablesBak = this.variables\r\n        this.variables = f.scope.pushScope()\r\n        for (let arg of f.args) {\r\n            this.variables.setVariable(arg, params[i++], true)\r\n        }\r\n        if (f.parent) {\r\n            // cache \"this\" object into variable $\r\n            this.variables.setVariable('$', f.parent, true)\r\n        }\r\n        \r\n        try {\r\n            const body = f.body.copy()\r\n            const result = await this.executeBlock(body, false)\r\n            return result\r\n\r\n        } finally {  // clean up variables\r\n            this.variables.popScope()\r\n            this.variables = variablesBak\r\n        }\r\n    }\r\n\r\n    async executeAssignment(assignment) {\r\n        if (!assignment.left || !assignment.right) {\r\n            throw new LangInterpretError(Errors.WRONG_ASSIGNMENT, assignment.source)\r\n        }\r\n        const value = await this.executeExpressionPart(assignment.right)        \r\n        // variable assignment\r\n        if (assignment.left.isVariable) {\r\n            const variable = this.variables.getVariable(assignment.left.name)\r\n            if (variable.protected && variable.protected()) throw new LangInterpretError(Errors.PROTECTED_FROM_MODIFICATION, assignment.left.source)\r\n            this.variables.setVariable(assignment.left.name, value)\r\n        } else\r\n        // object attribute or array element assignment\r\n        if (assignment.left.isExpression) {\r\n            await this.executeExpression(assignment.left, value)\r\n        }\r\n        else throw new LangInterpretError(Errors.WRONG_ASSIGNEE_TYPE)\r\n    }\r\n\r\n    async executeWhile(whileStm) {\r\n        if (!whileStm.condition || !whileStm.condition.isExpression) throw new LangInterpretError(Errors.WRONG_CONDITION, whileStm.source)\r\n        while (true) {\r\n            const cond = await this.executeExpressionPart(whileStm.condition)\r\n            if (cond.type !== Types.BOOLEAN) throw new LangInterpretError(Errors.WRONG_CONDITION_VALUE, cond.source)\r\n            if (cond.value) await this.executeBlock(whileStm.body.copy())\r\n            else break\r\n        } \r\n    }\r\n\r\n    async executeIf(ifStm) {\r\n        if (!ifStm.condition || !ifStm.condition.isExpression) throw new LangInterpretError(Errors.WRONG_CONDITION, ifStm.source)\r\n        const cond = await this.executeExpressionPart(ifStm.condition)\r\n        if (cond.type !== Types.BOOLEAN) throw new LangInterpretError(Errors.WRONG_CONDITION_VALUE, cond.source)\r\n        if (cond.value) await this.executeBlock(ifStm.body)\r\n        else if (ifStm.elseBody) await this.executeBlock(ifStm.elseBody)\r\n    }\r\n}\r\n\r\nclass VariablesScope {\r\n    constructor(imports = {}) {\r\n        this.variables = new Map()\r\n        this.parent = null\r\n        if (imports) Object.entries(imports).forEach(([k,v]) => this.variables.set(k, v))\r\n    }\r\n\r\n    hasVariable(name) {\r\n        if (this.variables.has(name)) return true\r\n        if (this.variables.has('$')) {\r\n            const self = this.variables.get('$')\r\n            if (self.hasAttribute(name)) return true\r\n        }\r\n        if (this.parent) return this.parent.hasVariable(name)\r\n        return false\r\n    }\r\n\r\n    getVariable(name) {\r\n        if (this.variables.has(name)) return this.variables.get(name)\r\n        if (this.variables.has('$')) {\r\n            const self = this.variables.get('$')\r\n            if (self.hasAttribute(name)) return self.attribute(name)\r\n        }\r\n        if (this.parent) return this.parent.getVariable(name)\r\n        return false\r\n    }\r\n\r\n    setVariable(name, value, scoped = false) {\r\n        if (scoped) {\r\n            this.variables.set(name, value)\r\n            return\r\n        }\r\n        let found = false\r\n        let scope = this\r\n        do {\r\n            if (scope.variables.has(name)) {\r\n                scope.variables.set(name, value)\r\n                found = true\r\n            }\r\n            scope = scope.parent\r\n        } while (!found && scope)\r\n        \r\n        if (!found) {\r\n            this.variables.set(name, value)\r\n        }\r\n    }\r\n\r\n    pushScope() {\r\n        const newScope = new VariablesScope()\r\n        newScope.parent = this\r\n        return newScope\r\n    }\r\n\r\n    popScope() {\r\n        const parent = this.parent\r\n        this.parent = null\r\n        return parent\r\n    }\r\n\r\n    copy() {\r\n        const newScope = new VariablesScope(this.imports)\r\n        newScope.variables = this.variables\r\n        newScope.parent = this.parent\r\n        return newScope\r\n    }\r\n}\r\n\r\n// wrapper over a function call (func and params are not resolved yet)\r\nclass FunctionExecution {\r\n    constructor(funcExp, params) {\r\n        this.funcExp = funcExp\r\n        this.params = params\r\n        this.isFunctionExecution = true\r\n    }\r\n}\r\n\r\nclass ExecutionStepper {\r\n    constructor(maxSteps, isInterruptedFn) {\r\n        this.maxSteps = maxSteps\r\n        this.isInterruptedFn = isInterruptedFn\r\n        this.steps = 0        \r\n    }\r\n\r\n    step(source) {\r\n        if (this.isInterruptedFn && this.isInterruptedFn()) throw new LangInterrupt(Interruptions.USER_SUSSPEND)\r\n        this.steps++\r\n        if (this.steps > this.maxSteps) throw new LangInterpretError(Errors.EXECUTION_STEPS_EXCEEDED, source)\r\n    }\r\n\r\n    reset(maxSteps = null) {\r\n        this.steps = 0\r\n        if (maxSteps) this.maxSteps = maxSteps\r\n    }\r\n}\r\n\r\nmodule.exports = Interpret","const Keywords = {\r\n    TRUE: ['true', 'pravda', 'wahr'],\r\n    FALSE: ['false', 'nepravda', 'falsch'],\r\n    IF: ['if', 'pokud', 'falls'],\r\n    ELSE: ['else', 'jinak', 'sonst'],\r\n    WHILE: ['while', 'dokud', 'solange'],\r\n}\r\n\r\nconst FeatureLocalizations = {\r\n    SIZE: ['size', 'velikost', 'größe'],\r\n}\r\n\r\nconst Errors = {\r\n    INVALID_UNI_OPERATOR: 'INVALID_UNI_OPERATOR',\r\n    INVALID_BI_OPERATOR: 'INVALID_BI_OPERATOR',\r\n    UNEXPECTED_END: 'UNEXPECTED_END',\r\n    UNEXPECTED_SYMBOL: 'UNEXPECTED_SYMBOL',\r\n    EXPECTED_SYMBOL: 'EXPECTED_SYMBOL',\r\n    UNREFERENCED_VARIABLE: 'UNREFERENCED_VARIABLE',\r\n    UNEXPECTED_KEYWORD: 'UNEXPECTED_KEYWORD',\r\n    INVALID_IDENTIFIER: 'INVALID_IDENTIFIER',\r\n    UNEVEN_OPERATORS: 'UNEVEN_OPERATORS',\r\n    EXPECTED_FUNCTION: 'EXPECTED_FUNCTION',\r\n    EXPECTED_STATEMENT_END: 'EXPECTED_STATEMENT_END',\r\n    ARRAY_INDEX_NOT_NUMBER: 'ARRAY_INDEX_NOT_NUMBER',\r\n    ARRAY_INDEX_MISSING: 'ARRAY_INDEX_MISSING',\r\n    ARRAY_INDEX_OUT_BOUNDS: 'ARRAY_INDEX_OUT_BOUNDS',\r\n    FUNC_ARGUMENTS_MISHMASH: 'FUNC_ARGUMENTS_MISHMASH',\r\n    ATTRIBUTE_ALREADY_EXISTS: 'ATTRIBUTE_ALREADY_EXISTS',\r\n    ATTRIBUTE_NOT_FOUND: 'ATTRIBUTE_NOT_FOUND',\r\n    ELEMENT_NOT_FOUND: 'ELEMENT_NOT_FOUND',\r\n    EMPTY_EXPRESSION: 'EMPTY_EXPRESSION',\r\n    UNKNOWN_OPERATOR: 'UNKNOWN_OPERATOR',\r\n    OPERATOR_NOT_APPLICABLE: 'OPERATOR_NOT_APPLICABLE',\r\n    ACCESS_OPERATOR_EXPECTED: 'ACCESS_OPERATOR_EXPECTED',\r\n    WRONG_UNI_OPERATOR_SUBJECT: 'WRONG_UNI_OPERATOR_SUBJECT',\r\n    WRONG_BI_OPERATOR_SUBJECTS: 'WRONG_BI_OPERATOR_SUBJECTS',\r\n    UNMATCHING_BI_OPERATOR_SUBJECTS: 'UNMATCHING_BI_OPERATOR_SUBJECTS',\r\n    EXPECTED_ARRAY: 'EXPECTED_ARRAY',\r\n    EXPECTED_OBJECT: 'EXPECTED_OBJECT',\r\n    EXPECTED_IDENTIFIER: 'EXPECTED_IDENTIFIER',\r\n    WRONG_ASSIGNMENT: 'WRONG_ASSIGNMENT',\r\n    WRONG_ASSIGNEE_TYPE: 'WRONG_ASSIGNEE_TYPE',\r\n    READONLY_ATTRIBUTE: 'READONLY_ATTRIBUTE',\r\n    WRONG_CONDITION: 'WRONG_CONDITION',\r\n    WRONG_CONDITION_VALUE: 'WRONG_CONDITION_VALUE',\r\n    EXECUTION_STEPS_EXCEEDED: 'EXECUTION_STEPS_EXCEEDED',\r\n    PARSER_STEPS_EXCEEDED: 'PARSER_STEPS_EXCEEDED',\r\n    PROTECTED_FROM_MODIFICATION: 'PROTECTED_FROM_MODIFICATION',\r\n    DIVISION_BY_ZERO: 'DIVISION_BY_ZERO',\r\n    UNKNOWN_ERROR: 'UNKNOWN_ERROR',\r\n}\r\n\r\nconst Types = {\r\n    NUMBER: 'NUMBER',\r\n    BOOLEAN: 'BOOLEAN',\r\n    STRING: 'STRING',\r\n    ARRAY: 'ARRAY',\r\n    OBJECT: 'OBJECT',\r\n    FUNCTION: 'FUNCTION',\r\n    VOID: 'VOID',\r\n}\r\n\r\nconst Interruptions = {\r\n    USER_SUSSPEND: 'USER_SUSSPEND',\r\n}\r\n\r\nclass LangInterrupt {\r\n    constructor(id) {\r\n        this.id = id\r\n        this.isLangInterruption = true\r\n    }\r\n}\r\n\r\nclass LangError extends Error {\r\n    constructor(id, pos, arg1, arg2) {\r\n        super(id)\r\n        this.details = `${arg1 ? `\"${arg1}\"` : ''} ${arg2 ? `\"${arg2}\"` : ''}`\r\n        this.message = `${id} ${this.details}`\r\n        this.id = id\r\n        this.arg1 = arg1\r\n        this.arg2 = arg2\r\n        this.position = pos\r\n        this.isLangError = true\r\n    }\r\n}\r\n\r\nclass LangParseError extends LangError {\r\n    constructor(id, pos, arg1, arg2) {\r\n        super(id, pos, arg1, arg2)\r\n        this.isParseError = true\r\n    }\r\n}\r\n\r\nclass LangInterpretError extends LangError {\r\n    constructor(id, pos, arg1, arg2) {\r\n        super(id, pos, arg1, arg2)\r\n        this.isInterpretError = true\r\n    }\r\n}\r\n\r\nclass Block {\r\n    constructor(statements, source) {\r\n        this.statements = statements\r\n        this.source = source\r\n    }\r\n    copy() {\r\n        return new Block(this.statements.map(s => s.copy()), this.source)\r\n    }\r\n}\r\n\r\nclass Statement {\r\n    constructor(source) {\r\n        this.isExpression = false\r\n        this.isAssignment = false\r\n        this.isWhile = false\r\n        this.isIf = false\r\n        this.source = source\r\n    }\r\n    copy() {\r\n        return this // immutable\r\n    }\r\n}\r\n\r\nclass Assignment extends Statement {\r\n    constructor(left, right, source) {\r\n        super(source)\r\n        this.isAssignment = true\r\n        this.left = left\r\n        this.right = right\r\n    }\r\n    copy() {\r\n        return new Assignment(this.left.copy(), this.right.copy(), this.source)\r\n    }\r\n}\r\n\r\nclass While extends Statement {\r\n    constructor(condition, body, source) {\r\n        super(source)\r\n        this.isWhile = true\r\n        this.condition = condition\r\n        this.body = body\r\n    }\r\n    copy() {\r\n        return new While(this.condition.copy(), this.body.copy(), this.source)\r\n    }\r\n}\r\n\r\nclass If extends Statement {\r\n    constructor(condition, body, bodyElse, source) {\r\n        super(source)\r\n        this.isIf = true\r\n        this.condition = condition\r\n        this.body = body\r\n        this.elseBody = bodyElse\r\n    }\r\n    copy() {\r\n        return new If(this.condition.copy(), this.body.copy(),this.elseBody?.copy(), this.source)\r\n    }\r\n}\r\n\r\nclass Expression extends Statement {\r\n    constructor(parts, source) {\r\n        super(source)\r\n        this.isExpression = true\r\n        this.parts = parts\r\n    }\r\n    copy() {\r\n        return new Expression(this.parts.map(p => p.copy()), this.source)\r\n    }\r\n}\r\n\r\nclass Variable {\r\n    constructor(name, source) {\r\n        this.isVariable = true\r\n        this.name = name\r\n        this.source = source\r\n    }\r\n    copy() {\r\n        return this // immutable\r\n    }\r\n}\r\n\r\nclass Operator {\r\n    constructor(op, precedence = -1) {\r\n        this.op = op\r\n        this.isOperator = true\r\n        this.precedence = precedence\r\n    }\r\n    copy() {\r\n        return this // immutable\r\n    }\r\n}\r\n\r\nclass UniOperator extends Operator {\r\n    constructor(op, source) {\r\n        super(op)\r\n        this.isUni = true\r\n        this.precedence = this.getPrecedence()\r\n        this.source = source\r\n    }\r\n    apply(a) {\r\n        const fn = getFn(this.op)\r\n        if (!fn || !fn.call) throw new LangError(Errors.OPERATOR_NOT_APPLICABLE, null, this.op)\r\n        return fn.call()\r\n\r\n        function getFn(op) {\r\n            switch (op) {\r\n                case '!': \r\n                case '-': return a.neg\r\n                default: throw new LangError(Errors.INVALID_UNI_OPERATOR, null, this.op)\r\n            }\r\n        }\r\n    }\r\n    getPrecedence() { // based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\r\n        switch (this.op) {\r\n            case '!':\r\n            case '-': return 14\r\n            default: -1\r\n        }\r\n    }\r\n}\r\n\r\nclass BiOperator extends Operator {\r\n    constructor(op, source) {\r\n        super(op)\r\n        this.isBi = true\r\n        this.precedence = this.getPrecedence()\r\n        this.isAddition = '+' === op\r\n        this.source = source\r\n    }\r\n    apply(a, b) {\r\n        const fn = getFn(this.op)\r\n        if (!fn || !fn.call) {\r\n            if ('=' === this.op) return new LangBoolean(false)\r\n            throw new LangError(Errors.OPERATOR_NOT_APPLICABLE, null, this.op)\r\n        }\r\n        if ('/' === this.op && Types.NUMBER === b.type && b.value === 0) {\r\n            throw new LangError(Errors.DIVISION_BY_ZERO, null, this.op)\r\n        }\r\n        return fn.call(b)\r\n\r\n        function getFn(op) {\r\n            switch (op) {\r\n                case '*': return a.mult\r\n                case '/': return a.div\r\n                case '%': return a.mod\r\n                case '+': return a.plus\r\n                case '-': return a.minus\r\n                case '<': return a.lt\r\n                case '<=': return a.le\r\n                case '>': return a.gt\r\n                case '>=': return a.ge\r\n                case '=': return a.eq\r\n                case '!=': return a.ne\r\n                case '&': return a.and\r\n                case '|': return a.or\r\n                default: throw new LangError(Errors.INVALID_BI_OPERATOR, null, this.op)\r\n            }\r\n        }\r\n    }\r\n    getPrecedence() { // based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\r\n        switch (this.op) {\r\n            case '*':\r\n            case '/':\r\n            case '%': return 12\r\n            case '+': \r\n            case '-': return 11\r\n            case '<': \r\n            case '<=':\r\n            case '>':\r\n            case '>=': return 9\r\n            case '=': \r\n            case '!=': return 8\r\n            case '&': return 4\r\n            case '|': return 3\r\n            default: -1\r\n        }\r\n    }\r\n}\r\n\r\nclass ArrayAccess extends Operator {\r\n    constructor(indexes, source) {\r\n        super('[]', 17)\r\n        this.isAccess = true\r\n        this.isArrayAccess = true\r\n        this.indexes = indexes\r\n        this.source = source\r\n    }\r\n    apply(a, indexes, newValue) { // indexes are resolved, but this.indexes are AST (expressions)\r\n        return a.element(indexes, newValue)\r\n    }\r\n}\r\n\r\nclass ObjectAccess extends Operator {\r\n    constructor(attrName, source) {\r\n        super('.', 17)\r\n        this.isAccess = true\r\n        this.isObjectAccess = true\r\n        this.attrName = attrName\r\n        this.source = source\r\n    }\r\n    apply(o, newValue) {\r\n        return o.attribute(this.attrName, newValue)\r\n    }\r\n}\r\n\r\nclass FunctionCall extends Operator {\r\n    constructor(params, source) {\r\n        super('()', 17)\r\n        this.isAccess = true\r\n        this.isCall = true\r\n        this.params = params\r\n        this.source = source\r\n    }\r\n}\r\n\r\nclass VarReference {\r\n    constructor(varName, source) {\r\n        this.isReference = true\r\n        this.varName = varName\r\n        this.source = source\r\n    }\r\n    copy() {\r\n        return this // immutable\r\n    }\r\n}\r\n\r\nclass LangObject {\r\n    constructor(obj, source, type = Types.OBJECT) {\r\n        this.value = obj\r\n        this.type = type\r\n        this.isObject = true\r\n        this.parent = null\r\n        this.source = source\r\n\r\n        this.eq = new LangNativeFunction(x => new LangBoolean(areObjectsEqual(this, x)))\r\n        this.ne = new LangNativeFunction(x => new LangBoolean(!(this.eq.call(x).value)))\r\n    }\r\n    attribute(name, newValue) {\r\n        const value = this[name] ? this[name] : this.value[name] // explicit attrs have priority over native ones\r\n        if (newValue && this.value[name]) this.value[name] = newValue\r\n        if (value) return value\r\n        if (this.parent) return this.parent.attribute(name)\r\n    }\r\n    hasAttribute(name) {\r\n        const hasValue = this[name] || this.value[name]\r\n        return hasValue || (this.parent && this.parent.hasAttribute(name))\r\n    }\r\n    protected() {\r\n        return this.isProtected || (this.parent && this.parent.protected())\r\n    }\r\n    protectedAttributes() {\r\n        return this.protected()\r\n    }\r\n    copy() {\r\n        const valueCopy = {}\r\n        Object.keys(this.value).forEach(k => valueCopy[k] = this.value[k].copy())\r\n        return new LangObject(valueCopy, this.source)\r\n    }\r\n}\r\n\r\nclass LangValueObject extends LangObject {\r\n    constructor(value, source, type) {\r\n        super(value, source, type)\r\n\r\n        this.eq = new LangNativeFunction(x => new LangBoolean(this.value === x.value))\r\n        this.ne = new LangNativeFunction(x => new LangBoolean(this.value !== x.value))\r\n    }\r\n    copy() {\r\n        return this // immutable\r\n    }\r\n}\r\n\r\nclass LangNumber extends LangValueObject {\r\n    constructor(value, source) {\r\n        super(value, source, Types.NUMBER)\r\n        this.isPrimitive = true\r\n        \r\n        this.mult = new LangNativeFunction(x => new LangNumber(this.value * x.value))\r\n        this.div = new LangNativeFunction(x => new LangNumber(this.value / x.value))\r\n        this.mod = new LangNativeFunction(x => new LangNumber(this.value % x.value))\r\n        this.plus = new LangNativeFunction(x => new LangNumber(this.value + x.value))\r\n        this.minus = new LangNativeFunction(x => new LangNumber(this.value - x.value))\r\n        this.lt = new LangNativeFunction(x => new LangBoolean(this.value < x.value))\r\n        this.le = new LangNativeFunction(x => new LangBoolean(this.value <= x.value))\r\n        this.gt = new LangNativeFunction(x => new LangBoolean(this.value > x.value))\r\n        this.ge = new LangNativeFunction(x => new LangBoolean(this.value >= x.value))\r\n        this.neg = new LangNativeFunction(() => new LangNumber(-this.value))\r\n        this.sum = new LangNativeFunction((...x) => new LangNumber(x.reduce((a,c) => a + c.value, this.value)))\r\n        this.round = new LangNativeFunction(() => new LangNumber(Math.round(this.value)))\r\n        this.floor = new LangNativeFunction(() => new LangNumber(Math.floor(this.value)))\r\n        this.ceil = new LangNativeFunction(() => new LangNumber(Math.ceil(this.value)))\r\n    }\r\n}\r\n\r\nclass LangString extends LangValueObject {\r\n    constructor(value, source) {\r\n        super(value, source, Types.STRING)\r\n        this.isPrimitive = true\r\n\r\n        this.concat = new LangNativeFunction(x => new LangString(this.value + x.value))\r\n        this.length = new LangNativeFunction(() => new LangNumber(this.value.length))\r\n        this.charAt = new LangNativeFunction(i => new LangString(this.value.charAt(i.value)))\r\n        this.sub = new LangNativeFunction((i, j) => {\r\n            if (i.value > this.value.length - 1 || i.value < 0 || (j && j.value <= i.value) || (j && j.value > this.value.length)) return new LangString('')\r\n            return new LangString(this.value.substring(i.value, j ? j.value : this.value.length))\r\n        })\r\n        \r\n        this.plus = this.concat\r\n        for (let s of FeatureLocalizations.SIZE) this[s] = new LangNumber(this.value.length)\r\n    }\r\n}\r\n\r\nclass LangBoolean extends LangValueObject {\r\n    constructor(value, source) {\r\n        super(value, source, Types.BOOLEAN)\r\n        this.isPrimitive = true\r\n\r\n        this.and = new LangNativeFunction(x => new LangBoolean(this.value && x.value))\r\n        this.or = new LangNativeFunction(x => new LangBoolean(this.value || x.value))\r\n        this.xor = new LangNativeFunction(x => new LangBoolean(this.value ? !x.value : x.value))\r\n        this.nand = new LangNativeFunction(x => new LangBoolean(!(this.value && x.value)))\r\n        this.neg = new LangNativeFunction(() => new LangBoolean(!this.value))\r\n\r\n        this.mult = this.and\r\n        this.plus = this.or\r\n    }\r\n}\r\n\r\nclass LangArray extends LangValueObject {\r\n    constructor(value, source) {\r\n        super(value, source, Types.ARRAY)\r\n\r\n        this.concat = new LangNativeFunction(x => new LangArray(this.value.concat(x.value)))\r\n\r\n        this.plus = this.concat\r\n        for (let s of FeatureLocalizations.SIZE) this[s] = new LangNumber(this.value.length)\r\n\r\n        this.eq = new LangNativeFunction(x => {\r\n            if (!x || !x.value) return new LangBoolean(false)\r\n            if (this.value.length !== x.value.length) return new LangBoolean(false)\r\n            for (let i = 0; i < this.value.length; i++)\r\n                if (!this.value[i].eq || !this.value[i].eq.isNative || !this.value[i].eq.call(x.value[i]).value) return new LangBoolean(false)\r\n            return new LangBoolean(true)\r\n        })\r\n        this.ne = new LangNativeFunction(x => new LangBoolean(!(this.eq.call(x).value)))\r\n    }\r\n    element(indexes, newValue) {\r\n        return indexes.reduce((a,c,i) => {\r\n            const index = Math.ceil(c.value)\r\n            if (index < 0 || index >= a.value.length) throw new LangError(Errors.ARRAY_INDEX_OUT_BOUNDS, null, index)\r\n            const v = a.value[index]\r\n            // set the value for the last element\r\n            if (newValue && i === indexes.length - 1)\r\n                a.value[index] = newValue            \r\n            return v\r\n        }, this)\r\n    }\r\n    attribute(name, newValue) {\r\n        if (FeatureLocalizations.SIZE.includes(name.toLowerCase())) {\r\n            if (newValue) throw new LangError(Errors.READONLY_ATTRIBUTE)\r\n            return new LangNumber(this.value.length)\r\n        }\r\n        return super.attribute(name, newValue)\r\n    }\r\n    hasAttribute(name) {\r\n        return FeatureLocalizations.SIZE.includes(name.toLowerCase()) || super.attribute(name, newValue)\r\n    }\r\n    copy() {\r\n        return new LangArray(this.value.map(p => p.copy()), this.source)\r\n    }\r\n}\r\n\r\nclass LangVoid extends LangValueObject {\r\n    constructor(source) {\r\n        super(null, source, Types.VOID)\r\n\r\n        this.eq = new LangNativeFunction(x => new LangBoolean(false))\r\n        this.ne = new LangNativeFunction(x => new LangBoolean(false))\r\n    }\r\n}\r\n\r\nclass LangFunction {\r\n    constructor(body, args, funcId, source) {\r\n        this.type = Types.FUNCTION\r\n        this.body = body\r\n        this.args = args\r\n        this.isFunction = true\r\n        this.source = source\r\n        this.funcId = funcId\r\n\r\n        this.eq = new LangNativeFunction(g => new LangBoolean(g.funcId === this.funcId))\r\n        this.ne = new LangNativeFunction(g => new LangBoolean(g.funcId !== this.funcId))\r\n    }\r\n    attribute(name, newValue) {\r\n        if (newValue) throw new LangError(Errors.READONLY_ATTRIBUTE)\r\n        const value = this[name] ? this[name] : this.value[name] // explicit attrs have priority over native ones\r\n        if (value) return value\r\n    }\r\n    hasAttribute(name) {\r\n        return this[name] || this.value[name]\r\n    }\r\n    protectedAttributes() {\r\n        return true\r\n    }\r\n    copy() {\r\n        return new LangFunction(this.body, this.args, this.funcId, this.source)\r\n    }\r\n}\r\n\r\nclass LangNativeFunction {\r\n    constructor(func, source) {\r\n        this.type = Types.FUNCTION\r\n        this.func = func\r\n        this.isNative = true\r\n        this.source = source\r\n    }\r\n    call(...params) {\r\n        return this.func(...params)\r\n    }\r\n    copy() {\r\n        return this // immutable\r\n    }\r\n}\r\n\r\nfunction areObjectsEqual(a, b) {\r\n    const aKeys = Object.keys(a.value)\r\n    const bKeys = Object.keys(b.value)\r\n    if (aKeys.length !== bKeys.length) return false\r\n    for (k of aKeys) {\r\n        if (!a.value[k].eq.call(b.value[k])) return false\r\n    }\r\n    return true\r\n}\r\n\r\nmodule.exports = {\r\n    Keywords,\r\n    Errors,\r\n    Interruptions,\r\n    Types,\r\n    Block,\r\n    Assignment,\r\n    While,\r\n    If,\r\n    Expression,\r\n    Variable,\r\n    UniOperator,\r\n    BiOperator,\r\n    ArrayAccess,\r\n    ObjectAccess,\r\n    FunctionCall,\r\n    VarReference,\r\n    ParseError: LangParseError,\r\n    InterpretError: LangInterpretError,\r\n    Interrupt: LangInterrupt,\r\n    Object: LangObject,\r\n    Number: LangNumber,\r\n    String: LangString,\r\n    Boolean: LangBoolean,\r\n    Array: LangArray,\r\n    Function: LangFunction,\r\n    NativeFunction: LangNativeFunction,\r\n    Void: LangVoid,\r\n}","const lang = require('./lang')\r\nconst Parser = require('./parser')\r\nconst Interpret = require('./interpreter')\r\n\r\nclass LudolfC {\r\n    /**\r\n     * @param {object} imports \r\n     * @param {isInterrupted: () => boolean} controls \r\n     */\r\n    constructor(imports = {}, controls = {}) {\r\n        this.parser = new Parser()\r\n        this.interpret = new Interpret(imports, controls)\r\n    }\r\n\r\n    /**\r\n     * Execute LudolfC code.\r\n     * @param {string} code \r\n     * @returns result of the execution\r\n     */\r\n    async execute(code) {\r\n        try {\r\n            const ast = this.parser.parse(code)\r\n            return await this.interpret.execute(ast)\r\n\r\n        } catch (e) {\r\n            if (e.isLangError && (e.position || e.position === 0)) {\r\n                const {line, col} = lineAndCol(this.parser.source.code, e.position)\r\n                e.line = line\r\n                e.col = col\r\n            }\r\n            throw e\r\n        }\r\n    }\r\n\r\n    hasVariable(name) {\r\n        return this.interpret.variables.hasVariable(name)\r\n    }\r\n\r\n    getVariable(name) {\r\n        return this.interpret.variables.getVariable(name)\r\n    }\r\n}\r\n\r\nfunction lineAndCol(code, position) {\r\n    let line = 1    // starting from 1\r\n    let col = 1\r\n    for (let i = 0; i < code.length && i <= position; i++) {\r\n        col++\r\n        if ('\\n' === code.charAt(i)) {\r\n            line++\r\n            col = 1\r\n        }\r\n    }\r\n    col = Math.max(1, col - 1)\r\n    return {line, col}\r\n}\r\n\r\nmodule.exports = { LudolfC, lang }\r\n","const { \r\n    Errors,\r\n    Keywords,\r\n    Block,\r\n    Assignment,\r\n    While,\r\n    If,\r\n    Expression,\r\n    Variable,\r\n    UniOperator,\r\n    BiOperator,\r\n    ArrayAccess,\r\n    ObjectAccess,\r\n    FunctionCall,\r\n    VarReference,\r\n    ParseError: LangParseError,\r\n    Object: LangObject,\r\n    Number: LangNumber,\r\n    String: LangString,\r\n    Boolean: LangBoolean,\r\n    Array: LangArray,\r\n    Function: LangFunction,\r\n    Void: LangVoid } = require('./lang')\r\n\r\nconst UniOperators = ['!', '-']\r\nconst BiOperators = ['*', '/', '%', '+', '-', '<', '<=', '>', '>=', '=', '!=', '&', '|']\r\n\r\nconst RE_NATIONAL_CHARS = `ěščřžťďýáíéúůüöäňñĚŠČŘŽŤĎÝÁÍÉÚŮÜÖÄŇÑß`\r\nconst RE_IDENTIFIER = `[a-zA-Z_${RE_NATIONAL_CHARS}][a-zA-Z0-9_${RE_NATIONAL_CHARS}]*`\r\nconst RE_FUNCTION = `\\\\((\\\\s*(${RE_IDENTIFIER})\\\\s*(,\\\\s*(${RE_IDENTIFIER}))*)?\\\\s*\\\\)\\\\s*\\{(.|\\\\s)*\\\\}`\r\n\r\nclass Source {\r\n    constructor(code, startingAt = 0) {\r\n        this.code = removeComments(code + '\\n')\r\n        this.pos = 0\r\n        this.startingAt = startingAt\r\n\r\n        function removeComments(s) {\r\n            if (!s.length) return s\r\n            let res = ''\r\n            let quote = null\r\n            let inString = false\r\n            let inComment = false\r\n            let i = 0\r\n            for (; i < s.length - 1; i++) {\r\n                const c = s.charAt(i)\r\n\r\n                if (!inString && isStringStarting(c)) {\r\n                    inString = true\r\n                    quote = c\r\n                }\r\n                else if (inString && isStringEnding(c, quote)) {\r\n                    inString = false\r\n                    quote = null\r\n                }\r\n                else if (!inString && c === '/' && s.charAt(i + 1) === '/') inComment = true\r\n                else if (c === '\\n') inComment = false\r\n\r\n                if (!inComment) res += c\r\n            }\r\n            return res + s.charAt(s.length - 1)\r\n        }\r\n    }\r\n\r\n    move(step = 1) {\r\n        this.pos += step\r\n    }\r\n\r\n    currentChar() {\r\n        return this.code.charAt(this.pos)\r\n    }\r\n\r\n    remaining(length = undefined) {\r\n        return this.code.substring(this.pos, Math.min(length ? this.pos + length : this.code.length - 1, this.code.length - 1))\r\n    }\r\n\r\n    next(length = 1) {\r\n        return this.code.substring(Math.min(this.pos + 1, this.code.length - 1), Math.min(this.pos + 1 + length, this.code.length - 1))\r\n    }\r\n\r\n    finished() {\r\n        return this.pos >= this.code.length\r\n    }\r\n\r\n    absPos() {\r\n        return this.pos + this.startingAt - /* last move */ 1 \r\n    }\r\n}\r\n\r\nclass Parser {\r\n    constructor() {    \r\n        this.steps = 0\r\n        this.maxSteps = 1000000 // to prevent infinite loops\r\n        this.fcount = 0 // counter for function IDs\r\n        this.source = new Source('')\r\n    }\r\n\r\n    parse(code) {\r\n        this.steps = 0\r\n        this.source = new Source(code)\r\n        return this.parseBlock(this.source)\r\n    }\r\n\r\n    parseBlock(source) {\r\n        const statements = []\r\n        while (!source.finished()) {\r\n            const stm = this.parseStatement(source)\r\n            if (stm) statements.push(stm)\r\n        }\r\n        return new Block(statements, source.absPos())\r\n    }\r\n\r\n    parseStatement(source) {\r\n        this._stepper()\r\n\r\n        let token = ''\r\n        \r\n        let expecting = null\r\n        let inAssignment = false\r\n\r\n        const openDefinitions = {\r\n            arrays: 0,  // [\r\n            objects: 0, // {\r\n            groups: 0, // (\r\n            ops: 0, // + - * / < > <= >=\r\n        }\r\n\r\n        for (; !source.finished(); source.move()) {\r\n            this._stepper()\r\n\r\n            const c = source.currentChar()\r\n\r\n            // consume the whole string to prevent space-ignoring\r\n            if (!inAssignment && isStringStarting(c)) {\r\n                let cc = c\r\n                do {\r\n                    token += cc\r\n                    source.move()\r\n                    cc = source.currentChar()\r\n                } while (!source.finished() && !isStringEnding(cc, c))\r\n            }\r\n            \r\n            // ignore spaces (except space between numbers)\r\n            if (!expecting && isSpace(c) && isSpace(token.charAt(token.length - 1))) continue\r\n\r\n            if (expecting && c !== expecting) {\r\n                throw new LangParseError(Errors.EXPECTED_SYMBOL, source.absPos(), expecting, c)\r\n            }\r\n            if (expecting === '=' && c === expecting) {\r\n                inAssignment = true\r\n                expecting = null\r\n                continue\r\n            }\r\n\r\n            if ('[' === c) openDefinitions.arrays++\r\n            if (']' === c) openDefinitions.arrays--\r\n            if ('{' === c) openDefinitions.objects++\r\n            if ('}' === c) openDefinitions.objects--\r\n            if ('(' === c) openDefinitions.groups++\r\n            if (')' === c) openDefinitions.groups--\r\n            \r\n            if ('+' === c || '-' === c || '*' === c || '/' === c || '<' === c || '>' === c || '=' === c) openDefinitions.ops++\r\n            else openDefinitions.ops && !isSpace(c, true) && openDefinitions.ops--\r\n\r\n            // end of the statement\r\n            if (isStatementSeparator(c) && !openDefinitions.arrays && !openDefinitions.objects && !openDefinitions.groups && !openDefinitions.ops) {\r\n                source.move()\r\n                break\r\n            }\r\n\r\n            // while\r\n            if (isWhileDef(source.remaining())) {\r\n                if (token.length) {\r\n                    throw new LangParseError(Errors.UNEXPECTED_SYMBOL, source.absPos(), token)\r\n                }\r\n                consumeSpaces(source)\r\n                consumeUntil(source, '\\\\s')\r\n                const def = this.parseWhile(source)\r\n                consumeSpaces(source, true)\r\n                if (!isStatementSeparator(source.currentChar())) throw new LangParseError(Errors.EXPECTED_STATEMENT_END, source.absPos())\r\n                return def\r\n            }\r\n\r\n            // if\r\n            if (isIfDef(source.remaining())) {\r\n                if (token.length) {\r\n                    throw new LangParseError(Errors.UNEXPECTED_SYMBOL, token)\r\n                }\r\n                const def = this.parseIfStatement(source)\r\n                return def\r\n            }\r\n\r\n            if (':' === c && !openDefinitions.objects) {    // assignment starting\r\n                if (!(token.trim().length)) throw new LangParseError(Errors.UNEXPECTED_SYMBOL, source.absPos(), c)\r\n                if (isKeyword(token.trim())) throw new LangParseError(Errors.UNEXPECTED_KEYWORD, source.absPos(), c)\r\n                expecting = '='\r\n            } else\r\n            if (inAssignment) {  // variable assignment                \r\n                const value = this.parseExpression(source, openDefinitions)\r\n                token = token.trim()\r\n                if (isIdentifier(token)) {\r\n                    const variable = new Variable(token, source.absPos())\r\n                    const assignment = new Assignment(variable, value, source.absPos())\r\n                    return assignment\r\n                } else {\r\n                    const exp = this.parseExpression(new Source(token, source.absPos() - token.length), {})\r\n                    if (!exp || exp.parts.some(p => p.isOperator && !p.isAccess))\r\n                        throw new LangParseError(Errors.INVALID_IDENTIFIER, source.absPos(), token)\r\n                    const assignment = new Assignment(exp, value, source.absPos())\r\n                    return assignment\r\n                }\r\n            }\r\n            else {\r\n                token += c\r\n            }\r\n        }\r\n\r\n        // statement is an expression\r\n        if (token.length) {\r\n            const exp = this.parseExpression(new Source(token, source.absPos() - token.length), {})\r\n            return exp\r\n        }\r\n    }\r\n\r\n    parseExpression(source, openDefinitions, inGrouping = null) {\r\n        this._stepper()\r\n\r\n        const parts = []\r\n\r\n        while (!source.finished()) {\r\n            this._stepper()\r\n\r\n            const c = source.currentChar()\r\n\r\n            // spaces\r\n            if (isSpace(c)) {\r\n                source.move()\r\n                continue\r\n            }\r\n\r\n            // end of the statement\r\n            if (isStatementSeparator(c) || ')' === c || ']' === c || '}' === c || ',' === c) {\r\n                if ((')' === c || ']' === c || '}' === c) && ((!inGrouping && inGrouping !== c) || !parts.length)) {\r\n                    throw new LangParseError(Errors.UNEXPECTED_SYMBOL, source.absPos(), c)\r\n                }\r\n                // return the list of tokens and operators\r\n                if (parts.length && (!parts[parts.length - 1].isOperator || parts[parts.length - 1].isAccess))\r\n                    return new Expression(parts, source.absPos())\r\n                \r\n                source.move()\r\n                continue\r\n            }\r\n\r\n            // function defition\r\n            if (isFunctionDef(source.remaining())) {\r\n                if (parts.length && !parts[parts.length - 1].isOperator) {\r\n                    throw new LangParseError(Errors.UNEXPECTED_SYMBOL, source.absPos(), c)\r\n                }\r\n                const fn = this.parseFunction(source)\r\n                parts.push(fn)\r\n                continue\r\n            }\r\n\r\n            // object definition\r\n            if ('{' === c) {\r\n                if (!leftOperatorExpected()) {\r\n                    throw new LangParseError(Errors.UNEXPECTED_SYMBOL, source.absPos(), c)\r\n                }\r\n                source.move()\r\n                const attributes = this.readAttributes(source, ')')\r\n\r\n                consumeSpaces(source)\r\n                if ('}' === source.currentChar()) {\r\n                    const obj = new LangObject(attributes, source.absPos())\r\n                    // set the self reference\r\n                    for (let attr of Object.values(attributes)) {\r\n                        if (attr.isObject) {\r\n                            attr.parent = obj\r\n                        }\r\n                    }\r\n                    parts.push(obj)                    \r\n                    source.move()\r\n                    openDefinitions.objects--\r\n                    continue\r\n                }\r\n                throw new LangParseError(Errors.UNEXPECTED_SYMBOL, source.absPos(), source.currentChar(), '}')\r\n            }\r\n\r\n            // grouping or a function call\r\n            if ('(' === c) {\r\n                source.move()\r\n                if (rightOperatorExpected()) {    // a function call\r\n                    const params = this.readList(source, ')')\r\n                    consumeSpaces(source)\r\n    \r\n                    if (')' === source.currentChar()) {\r\n                        var call = new FunctionCall(params, source.absPos())\r\n                        parts.push(call)\r\n                        source.move()\r\n                    } else {\r\n                        throw new LangParseError(Errors.UNEXPECTED_SYMBOL, source.absPos(), source.currentChar(), ')')\r\n                    }\r\n                } else {    // grouping\r\n                    const exp = this.parseExpression(source, openDefinitions, true)\r\n                    parts.push(exp)\r\n                    consumeSpaces(source)\r\n                    if (')' !== source.currentChar()) throw new LangParseError(Errors.EXPECTED_SYMBOL, source.absPos(), ')')\r\n                    source.move()\r\n                }\r\n                continue\r\n            }\r\n\r\n            // object attribute access\r\n            if ('.' === c && rightOperatorExpected()) {\r\n                source.move()\r\n                const attrName = this.readIdentifier(source)               \r\n                parts.push(new ObjectAccess(attrName, source.absPos()))\r\n                continue\r\n            }\r\n\r\n            // array\r\n            if ('[' === c) {\r\n                source.move()\r\n                if (rightOperatorExpected()) { // array access\r\n                    const indexes = this.readList(source, ']')\r\n                    consumeSpaces(source)\r\n\r\n                    if (!indexes.length) throw new LangParseError(Errors.ARRAY_INDEX_MISSING, source.absPos())\r\n\r\n                    if (']' === source.currentChar()) {\r\n                        if (indexes.some(i => !i.isExpression || !i.parts.length)) throw new LangParseError(Errors.ARRAY_INDEX_NOT_NUMBER, source.absPos())\r\n                        source.move()\r\n                        parts.push(new ArrayAccess(indexes, source.absPos()))\r\n                    } else {\r\n                        throw new LangParseError(Errors.UNEXPECTED_SYMBOL, source.absPos(), source.currentChar(), ']')\r\n                    }\r\n                } else {    // array definition\r\n                    const elements = this.readList(source, ']')\r\n                    consumeSpaces(source)\r\n    \r\n                    if (']' === source.currentChar()) {\r\n                        parts.push(new LangArray(elements, source.absPos()))\r\n                        source.move()\r\n                        openDefinitions.arrays--\r\n                    } else {\r\n                        throw new LangParseError(Errors.UNEXPECTED_SYMBOL, source.absPos(), source.currentChar(), ']')\r\n                    }\r\n                }\r\n                continue\r\n            }\r\n\r\n            // operators\r\n            if (leftOperatorExpected()) {\r\n                if (UniOperators.includes(c)) {\r\n                    parts.push(new UniOperator(c, source.absPos()))\r\n                    source.move()\r\n                    if (isSpace(source.currentChar())) throw new LangParseError(Errors.UNEXPECTED_SYMBOL, source.absPos(), source.currentChar())\r\n                    continue\r\n                }\r\n            } else \r\n            if (rightOperatorExpected()) {\r\n                const next2 = source.remaining(2)\r\n                if (BiOperators.includes(next2)) {\r\n                    parts.push(new BiOperator(next2, source.absPos()))\r\n                    source.move(next2.length)\r\n                    continue\r\n                }\r\n                if (BiOperators.includes(c)) {\r\n                    parts.push(new BiOperator(c, source.absPos()))\r\n                    source.move()\r\n                    continue\r\n                }\r\n            }\r\n\r\n            if (rightOperatorExpected()) throw new LangParseError(Errors.UNEXPECTED_SYMBOL, source.absPos(), source.currentChar())\r\n\r\n            const exp = this.parseMemberExpression(source)\r\n            parts.push(exp)\r\n        }\r\n\r\n        // after finished, the statement must be complete\r\n        if (endsWithOperator()) throw new LangParseError(Errors.UNEVEN_OPERATORS, source.absPos() - 1) \r\n\r\n        // ///////////////////////////////////////////\r\n\r\n        function leftOperatorExpected() {\r\n            return !parts.length || (parts[parts.length - 1].isOperator && !parts[parts.length - 1].isAccess)\r\n        }\r\n\r\n        function rightOperatorExpected() {\r\n            return parts.length && (!parts[parts.length - 1].isOperator || parts[parts.length - 1].isAccess)\r\n        }\r\n\r\n        function endsWithOperator() {\r\n            return parts.length && (parts[parts.length - 1].isOperator && !parts[parts.length - 1].isAccess)\r\n        }\r\n    }\r\n\r\n    parseMemberExpression(source) {\r\n        this._stepper()\r\n\r\n        let token = ''\r\n\r\n        for (; !source.finished(); source.move()) {\r\n            this._stepper()\r\n            \r\n            const c = source.currentChar()\r\n\r\n            // token ends\r\n            if (isExpressionSeparator(c)) {\r\n                if ('.' === c && /^(0|([1-9][0-9]*))$/.test(token) && /[0-9]/.test(source.next())) { // float number\r\n                    token += c\r\n                    continue\r\n                }\r\n                if (Keywords.TRUE.includes(token.toLowerCase())) {\r\n                    return new LangBoolean(true, source.absPos())\r\n                }\r\n                if (Keywords.FALSE.includes(token.toLowerCase())) {\r\n                    return new LangBoolean(false, source.absPos())\r\n                }\r\n                if (isNumeric(token)) {\r\n                    return new LangNumber(token.includes('.') ? parseFloat(token) : parseInt(token), source.absPos())\r\n                } \r\n                if (isIdentifier(token) || '$' === token) {\r\n                    return new VarReference(token, source.absPos())\r\n                }\r\n                throw new LangParseError(Errors.UNEXPECTED_SYMBOL, source.absPos(), token)\r\n            }\r\n\r\n            if (isStringStarting(c)) {\r\n                source.move()\r\n                return new LangString(this.readString(source, c), source.absPos())\r\n            }\r\n\r\n            token += c\r\n        }\r\n    }\r\n\r\n    parseIfStatement(source) {\r\n        consumeSpaces(source)\r\n        consumeUntil(source, '\\\\s')\r\n        const def = this.parseIf(source)\r\n        consumeSpaces(source, true)\r\n\r\n        let newLine = isStatementSeparator(source.currentChar())\r\n        consumeSpaces(source)\r\n\r\n        if (isElseDef(source.remaining())) {\r\n            consumeUntil(source, '\\\\s')\r\n            def.elseBody = this.parseBody(source)\r\n            consumeSpaces(source, true)\r\n        } else\r\n        if (isElseIfDef(source.remaining())) {\r\n            consumeUntil(source, '\\\\s')\r\n            const elseIf = this.parseIfStatement(source)\r\n            def.elseBody = new Block([elseIf], source.absPos())\r\n            newLine = true\r\n        }\r\n        if (!newLine && !isStatementSeparator(source.currentChar())) throw new LangParseError(Errors.EXPECTED_STATEMENT_END, source.absPos())\r\n        return def\r\n    }\r\n\r\n    readList(source, groupingCloseChar) {\r\n        consumeSpaces(source)\r\n        if (groupingCloseChar === source.currentChar()) {\r\n            return []\r\n        } else {    // multiple params\r\n            const params = []\r\n            do {\r\n                const value = this.parseExpression(source, {}, groupingCloseChar)\r\n                params.push(value)\r\n\r\n                consumeSpaces(source)\r\n\r\n            } while(',' === source.currentChar() && !source.finished())\r\n\r\n            return params\r\n        }\r\n    }\r\n\r\n    readAttributes(source) {\r\n        consumeSpaces(source)\r\n        if ('}' === source.currentChar()) {\r\n            return {}\r\n        } else {    // multiple attributes\r\n            const attributes = {}\r\n            let first = true\r\n            do {\r\n                if (!first) {\r\n                    source.move()\r\n                }\r\n                first = false\r\n                consumeSpaces(source)\r\n\r\n                const name = this.readIdentifier(source)\r\n                if (attributes[name]) {\r\n                    throw new LangParseError(Errors.ATTRIBUTE_ALREADY_EXISTS, source.absPos(), name)\r\n                }\r\n                consumeSpaces(source)\r\n\r\n                if (':' !== source.currentChar()) {\r\n                    throw new LangParseError(Errors.EXPECTED_SYMBOL, source.absPos(), ':', source.currentChar())\r\n                }\r\n                source.move()\r\n\r\n                const value = this.parseExpression(source, {}, '}')\r\n                attributes[name] = value\r\n\r\n                consumeSpaces(source)\r\n\r\n            } while(',' === source.currentChar() && !source.finished())\r\n\r\n            return attributes\r\n        }\r\n    }\r\n\r\n    parseWhile(source) {\r\n        const condCode = this.readUntilBodyOpens(source)\r\n        const cond = this.parseExpression(new Source(condCode, source.absPos() - condCode.length), {}, null)\r\n        const body = this.parseBody(source)\r\n        return new While(cond, body, source.absPos())\r\n    }\r\n\r\n    parseIf(source) {\r\n        const condCode = this.readUntilBodyOpens(source)\r\n        const cond = this.parseExpression(new Source(condCode, source.absPos() - condCode.length), {}, null)\r\n        const body = this.parseBody(source)\r\n        return new If(cond, body, null, source.absPos())\r\n    }\r\n\r\n    parseFunction(source) {\r\n        const args = this.readArguments(source)\r\n        const body = this.parseBody(source)\r\n        return new LangFunction(body, args, ++this.fcount, source.absPos())\r\n    }\r\n\r\n    readArguments(source) {\r\n        consumeSpaces(source)\r\n\r\n        if ('(' !== source.currentChar()) {\r\n            throw new LangParseError(Errors.EXPECTED_SYMBOL, source.absPos(), '(', source.currentChar())\r\n        }       \r\n        source.move()\r\n        consumeSpaces(source) \r\n\r\n        const args = []\r\n        let first = true\r\n        while((',' === source.currentChar() || ')' !== source.currentChar()) && !source.finished()) {\r\n            if (!first) source.move()\r\n            first = false\r\n\r\n            const name = this.readIdentifier(source)\r\n            args.push(name)\r\n\r\n            consumeSpaces(source)\r\n        }\r\n\r\n        if (')' !== source.currentChar()) {\r\n            throw new LangParseError(Errors.EXPECTED_SYMBOL, source.absPos(), ')', source.currentChar())\r\n        }\r\n        source.move()\r\n        return args\r\n    }\r\n\r\n    parseBody(source) {\r\n        consumeSpaces(source)\r\n\r\n        if ('{' !== source.currentChar()) {\r\n            throw new LangParseError(Errors.EXPECTED_SYMBOL, source.absPos(), '{', source.currentChar())\r\n        }\r\n\r\n        source.move()\r\n        consumeSpaces(source)\r\n\r\n        let body = ''\r\n        let openQuotings = 0\r\n        while((openQuotings || '}' !== source.currentChar()) && !source.finished()) {\r\n            const c = source.currentChar()\r\n            body += c\r\n            source.move()\r\n\r\n            if ('{' === c) openQuotings++\r\n            if ('}' === c) openQuotings--\r\n        } \r\n\r\n        if ('}' !== source.currentChar()) {\r\n            throw new LangParseError(Errors.EXPECTED_SYMBOL, source.absPos(), '}', source.currentChar())\r\n        }\r\n        source.move()\r\n\r\n        if (/^\\s*$/.test(body)) {\r\n            return new Block([new LangVoid(source.absPos())], source.absPos())\r\n        }\r\n\r\n        const block = this.parseBlock(new Source(body, source.absPos() - body.length))\r\n        return block\r\n    }\r\n    \r\n    readString(source, quoting) {\r\n        let token = ''\r\n        for (; !source.finished(); source.move()) {\r\n            const c = source.currentChar()\r\n\r\n            if (isStringEnding(c, quoting)) {\r\n                source.move()\r\n                return token\r\n            }\r\n            token += c\r\n        }\r\n        throw new LangParseError(Errors.UNEXPECTED_END, source.absPos())\r\n    }\r\n\r\n    readIdentifier(source) {\r\n        let token = ''\r\n        for (; !source.finished(); source.move()) {\r\n            const c = source.currentChar()\r\n            if (isSpace(c)) continue\r\n            if (!new RegExp(`^${RE_IDENTIFIER}$`).test(token + c)) break                \r\n            token += c\r\n        }\r\n        if (token) return token\r\n        throw new LangParseError(Errors.EXPECTED_IDENTIFIER, source.absPos())\r\n    }\r\n\r\n    readUntilBodyOpens(source) {\r\n        let curlies = 0\r\n        let quotations = 0\r\n        let token = ''\r\n        for (; !source.finished(); source.move()) {\r\n            const c = source.currentChar()\r\n            if (isStringStarting(c)) {\r\n                token += this.readString(source, c)\r\n                continue\r\n            }\r\n            if ('(' === c) quotations++\r\n            else\r\n            if (')' === c) quotations--\r\n            else\r\n            if ('{' === c) {\r\n                if (!curlies && !quotations) break\r\n                curlies++\r\n            } else \r\n            if ('}' === c) {\r\n                curlies--\r\n                if (curlies < 0) throw new LangParseError(Errors.UNEXPECTED_SYMBOL, source.absPos(), c)\r\n            }\r\n            token += c\r\n        }\r\n        if (token) return token\r\n    }\r\n\r\n    _stepper() {\r\n        this.steps++\r\n        if (this.steps > this.maxSteps) throw new LangParseError(Errors.PARSER_STEPS_EXCEEDED, source.absPos())\r\n    }\r\n}\r\n\r\nfunction consumeSpaces(source, stopAtNewLine = false) {\r\n    while (!source.finished() && /\\s/.test(source.currentChar()) && (!stopAtNewLine || '\\n' !== source.currentChar())) source.move()\r\n}\r\n\r\nfunction consumeUntil(source, untilChar) {\r\n    const re = new RegExp(untilChar)\r\n    while (!source.finished() && !re.test(source.currentChar())) source.move()\r\n}\r\n\r\nfunction isNumeric(str) {\r\n    return !isNaN(str) && !isNaN(parseFloat(str))\r\n}\r\n\r\nfunction isKeyword(str) {\r\n    str = str.toLowerCase()\r\n    return Object.values(Keywords).some(k => k.includes(str)) ||  Keywords.WHILE.includes(str) || Keywords.IF.includes(str)\r\n}\r\n\r\nfunction isSpace(c, newlines = false) {\r\n    return ('\\n' !== c || newlines) && /\\s+/g.test(c)\r\n}\r\n\r\nfunction isExpressionSeparator(c) {\r\n    return isSpace(c) || isStatementSeparator(c) \r\n        || '(' === c || ')' === c || '[' === c || ']' === c || '{' === c || '}' === c \r\n        || '.' === c || ',' === c\r\n        || BiOperators.some(op => op.startsWith(c)) || UniOperators.some(op => op.startsWith(c))\r\n}\r\n\r\nfunction isStatementSeparator(c) {\r\n    return '\\n' === c || ';' === c\r\n}\r\n\r\nfunction isStringStarting(c) {\r\n    return c === '\"' || c === '“' || c === '”' || c === \"'\"\r\n}\r\n\r\nfunction isStringEnding(c, quoting) {\r\n    return quoting === c || (c === '”' && quoting === '“')\r\n}\r\n\r\nfunction isIdentifier(token) {\r\n    return new RegExp(`^${RE_IDENTIFIER}$`).test(token)\r\n}\r\n\r\nfunction isFunctionDef(remaining) {\r\n    return new RegExp(`^${RE_FUNCTION}`).test(remaining)\r\n}\r\n\r\nfunction isWhileDef(remaining) {\r\n    return Keywords.WHILE.some(k => new RegExp(`^\\\\s*${k}\\\\s(.+)\\\\s{`, 's').test(remaining)) \r\n}\r\n\r\nfunction isIfDef(remaining) {\r\n    return Keywords.IF.some(k => new RegExp(`^\\\\s*${k}\\\\s(.+)\\\\s{`, 's').test(remaining))\r\n}\r\n\r\nfunction isElseDef(remaining) {\r\n    return Keywords.ELSE.some(k => new RegExp(`^\\\\s*${k}\\\\s+{`, 's').test(remaining)) \r\n}\r\n\r\nfunction isElseIfDef(remaining) {\r\n    return Keywords.ELSE.some(k => new RegExp(`^\\\\s*${k}\\\\s+(${Keywords.IF.join('|')})`).test(remaining)) \r\n}\r\n\r\nmodule.exports = Parser","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(17);\n"],"names":["root","factory","exports","module","define","amd","this","Types","Errors","Interruptions","InterpretError","LangInterpretError","Interrupt","LangInterrupt","Void","LangVoid","VariablesScope","constructor","imports","variables","Map","parent","Object","entries","forEach","k","v","set","hasVariable","name","has","get","hasAttribute","getVariable","self","attribute","setVariable","value","scoped","found","scope","pushScope","newScope","popScope","copy","FunctionExecution","funcExp","params","isFunctionExecution","ExecutionStepper","maxSteps","isInterruptedFn","steps","step","source","USER_SUSSPEND","EXECUTION_STEPS_EXCEEDED","reset","controls","stepper","isInterrupted","async","ast","executeBlock","block","result","stm","statements","executeStatement","isExpression","executeExpression","isAssignment","executeAssignment","isWhile","executeWhile","isIf","executeIf","expression","assignNewValue","parts","EMPTY_EXPRESSION","executeExpressionParts","executeShortCircuitExpressionParts","op","shouldShortCircuit","index","findFirstOp","left","slice","type","BOOLEAN","WRONG_BI_OPERATOR_SUBJECTS","right","expOr","expAnd","assignApplied","findNextOp","isObjectAccess","isArrayAccess","ACCESS_OPERATOR_EXPECTED","isUni","a","executeExpressionPart","WRONG_UNI_OPERATOR_SUBJECT","apply","removeElementAt","isBi","b","isAddition","STRING","isPrimitive","UNMATCHING_BI_OPERATOR_SUBJECTS","ARRAY","EXPECTED_ARRAY","protectedAttributes","PROTECTED_FROM_MODIFICATION","indexes","Promise","all","map","i","isLastOperator","ATTRIBUTE_NOT_FOUND","o","isObject","isFunction","EXPECTED_OBJECT","isCall","UNKNOWN_OPERATOR","e","isLangError","UNKNOWN_ERROR","isInterpretError","id","arg1","arg2","maxPrecedence","Number","MIN_SAFE_INTEGER","length","isOperator","precedence","arr","filter","_","includes","expressionPart","isReference","varName","UNREFERENCED_VARIABLE","func","p","executeFunctionCall","OBJECT","obj","keys","f","isNative","call","args","FUNC_ARGUMENTS_MISHMASH","variablesBak","arg","body","assignment","WRONG_ASSIGNMENT","isVariable","variable","protected","WRONG_ASSIGNEE_TYPE","whileStm","condition","WRONG_CONDITION","cond","WRONG_CONDITION_VALUE","ifStm","elseBody","FeatureLocalizations","SIZE","INVALID_UNI_OPERATOR","INVALID_BI_OPERATOR","UNEXPECTED_END","UNEXPECTED_SYMBOL","EXPECTED_SYMBOL","UNEXPECTED_KEYWORD","INVALID_IDENTIFIER","UNEVEN_OPERATORS","EXPECTED_FUNCTION","EXPECTED_STATEMENT_END","ARRAY_INDEX_NOT_NUMBER","ARRAY_INDEX_MISSING","ARRAY_INDEX_OUT_BOUNDS","ATTRIBUTE_ALREADY_EXISTS","ELEMENT_NOT_FOUND","OPERATOR_NOT_APPLICABLE","EXPECTED_IDENTIFIER","READONLY_ATTRIBUTE","PARSER_STEPS_EXCEEDED","DIVISION_BY_ZERO","NUMBER","FUNCTION","VOID","LangError","Error","pos","super","details","message","position","Block","s","Statement","Assignment","While","If","bodyElse","Expression","Operator","LangObject","eq","LangNativeFunction","x","LangBoolean","aKeys","bKeys","areObjectsEqual","ne","newValue","isProtected","valueCopy","LangValueObject","LangNumber","mult","div","mod","plus","minus","lt","le","gt","ge","neg","sum","reduce","c","round","Math","floor","ceil","LangString","concat","charAt","sub","j","substring","and","or","xor","nand","LangArray","element","toLowerCase","LangFunction","funcId","g","Keywords","TRUE","FALSE","IF","ELSE","WHILE","Variable","UniOperator","getPrecedence","fn","getFn","BiOperator","ArrayAccess","isAccess","ObjectAccess","attrName","FunctionCall","VarReference","ParseError","isParseError","isLangInterruption","String","Boolean","Array","Function","NativeFunction","lang","Parser","Interpret","LudolfC","parser","interpret","code","parse","execute","line","col","max","lineAndCol","LangParseError","UniOperators","BiOperators","RE_NATIONAL_CHARS","RE_IDENTIFIER","RE_FUNCTION","Source","startingAt","res","quote","inString","inComment","isStringStarting","isStringEnding","removeComments","move","currentChar","remaining","min","next","finished","absPos","consumeSpaces","stopAtNewLine","test","consumeUntil","untilChar","re","RegExp","isKeyword","str","values","some","isSpace","newlines","isExpressionSeparator","isStatementSeparator","startsWith","quoting","isIdentifier","token","isWhileDef","isIfDef","fcount","parseBlock","parseStatement","push","_stepper","expecting","inAssignment","openDefinitions","arrays","objects","groups","ops","cc","def","parseWhile","parseIfStatement","parseExpression","trim","exp","inGrouping","parseFunction","leftOperatorExpected","attributes","readAttributes","attr","rightOperatorExpected","readList","readIdentifier","elements","next2","parseMemberExpression","isNaN","parseFloat","parseInt","readString","parseIf","newLine","parseBody","join","isElseIfDef","elseIf","groupingCloseChar","first","condCode","readUntilBodyOpens","readArguments","openQuotings","curlies","quotations","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}