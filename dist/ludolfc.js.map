{"version":3,"file":"ludolfc.js","mappings":"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","sources":["webpack://ludolfc/webpack/universalModuleDefinition","webpack://ludolfc/./src/interpreter.js","webpack://ludolfc/./src/lang.js","webpack://ludolfc/./src/ludolfc.js","webpack://ludolfc/./src/parser.js","webpack://ludolfc/webpack/bootstrap","webpack://ludolfc/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ludolfc\"] = factory();\n\telse\n\t\troot[\"ludolfc\"] = factory();\n})(this, () => {\nreturn ","const { \r\n    Types,\r\n    Errors,\r\n    Interruptions,\r\n    InterpretError: LangInterpretError,\r\n    Interrupt: LangInterrupt,\r\n    Void: LangVoid } = require('./lang')\r\n    \r\nclass Interpret {\r\n    constructor(imports = {}, controls, maxSteps = 100000) {\r\n        this.imports = imports\r\n        this.stepper = new ExecutionStepper(maxSteps, controls && controls.isInterrupted) // to prevent infinite loops        \r\n    }\r\n\r\n    async execute(ast) {\r\n        this.variables = new VariablesScope(this.imports)\r\n        this.stepper.reset()\r\n        return await this.executeBlock(ast, false)\r\n    }\r\n\r\n    async executeBlock(block, newScope = true) {        \r\n        if (newScope) this.variables = this.variables.pushScope()\r\n        let result\r\n        for (let stm of block.statements) {\r\n            result = await this.executeStatement(stm)\r\n        }\r\n        if (newScope) this.variables = this.variables.popScope()\r\n        return result ? result : new LangVoid()\r\n    }\r\n\r\n    async executeStatement(stm) {\r\n        this.stepper.step(stm.source)\r\n        return stm.isExpression ? await this.executeExpression(stm) :\r\n               stm.isAssignment ? await this.executeAssignment(stm) :\r\n               stm.isWhile ? await this.executeWhile(stm) :\r\n               stm.isIf ? await this.executeIf(stm) : \r\n               stm\r\n    }\r\n\r\n    async executeExpression(expression, assignNewValue = null) {\r\n        this.stepper.step(expression.source)\r\n        if (!expression.parts) throw new LangInterpretError(Errors.EMPTY_EXPRESSION, expression.source)\r\n        let parts = [...expression.parts]\r\n        return await this.executeExpressionParts(parts, assignNewValue)\r\n    }\r\n\r\n    async executeExpressionParts(parts, assignNewValue = null) {\r\n        // left to right by precendence\r\n        let index\r\n        let assignApplied = false\r\n        while ((index = findNextOp()) > -1) {\r\n            const op = parts[index]\r\n\r\n            if (assignNewValue && !op.isObjectAccess && !op.isArrayAccess) throw new LangInterpretError(Errors.ACCESS_OPERATOR_EXPECTED, op.source)\r\n\r\n            try {\r\n                if (op.isUni) {\r\n                    const a = await this.executeExpressionPart(parts[index + 1])\r\n                    if (!a.type) throw new LangInterpretError(Errors.WRONG_UNI_OPERATOR_SUBJECT, op.source)\r\n                    parts[index] = op.apply(a)\r\n                    parts = removeElementAt(parts, index + 1)\r\n                } else\r\n                if (op.isBi) {\r\n                    const a = await this.executeExpressionPart(parts[index - 1])\r\n                    if (!op.shortCircuit(a.value)) {\r\n                        const b = await this.executeExpressionPart(parts[index + 1])\r\n                        if (!a.type || !b.type) throw new LangInterpretError(Errors.WRONG_BI_OPERATOR_SUBJECTS, op.source)\r\n                        if (a.type !== b.type && !(op.isAddition && Types.STRING === a.type && b.isPrimitive)) throw new LangInterpretError(Errors.UNMATCHING_BI_OPERATOR_SUBJECTS, op.source)\r\n                        parts[index] = op.apply(a, b)\r\n                    } else {\r\n                        parts[index] = a\r\n                    }\r\n                    parts = removeElementAt(parts, index - 1, index + 1)\r\n                } else\r\n                if (op.isArrayAccess) {\r\n                    const a = await this.executeExpressionPart(parts[index - 1])\r\n                    if (Types.ARRAY !== a.type) throw new LangInterpretError(Errors.EXPECTED_ARRAY, op.source)\r\n                    if (assignNewValue && a.protectedAttributes()) throw new LangInterpretError(Errors.PROTECTED_FROM_MODIFICATION, op.source)\r\n                    const indexes = await Promise.all(op.indexes.map(i => this.executeExpressionPart(i)))\r\n                    parts[index] = op.apply(a, indexes, (assignNewValue && isLastOperator()) ? assignNewValue : null)\r\n                    if (!parts[index]) throw new LangInterpretError(Errors.ATTRIBUTE_NOT_FOUND, op.source)\r\n                    parts = removeElementAt(parts, index - 1)\r\n                    assignApplied = true\r\n                } else\r\n                if (op.isObjectAccess) {\r\n                    const o = await this.executeExpressionPart(parts[index - 1])\r\n                    if (!o.isObject && !o.isFunction) throw new LangInterpretError(Errors.EXPECTED_OBJECT, op.source)\r\n                    if (assignNewValue && o.protectedAttributes()) throw new LangInterpretError(Errors.PROTECTED_FROM_MODIFICATION, op.source)\r\n                    parts[index] = op.apply(o, (assignNewValue && isLastOperator()) ? assignNewValue : null)\r\n                    if (!parts[index]) throw new LangInterpretError(Errors.ATTRIBUTE_NOT_FOUND, op.source)\r\n                    parts = removeElementAt(parts, index - 1)\r\n                    assignApplied = true\r\n                } else \r\n                if (op.isCall) {\r\n                    parts[index] = new FunctionExecution(parts[index - 1], op.params)  // to prevent immediate execution\r\n                    parts = removeElementAt(parts, index - 1)\r\n                }\r\n                else throw new LangInterpretError(Errors.UNKNOWN_OPERATOR, op.source)\r\n\r\n            } catch (e) {   // LangError could be raised from applying the operator in lang.js\r\n                if (e.isLangError) {\r\n                    if (!e.isInterpretError) throw new LangInterpretError(e.id, op.source, e.arg1, e.arg2)\r\n                } else {\r\n                    throw new LangInterpretError(Errors.UNKNOWN_ERROR, op.source, e)\r\n                }\r\n                throw e\r\n            }\r\n        }\r\n\r\n        if (assignNewValue && !assignApplied) throw new LangInterpretError(Errors.ACCESS_OPERATOR_EXPECTED, parts[0].source)\r\n\r\n        return await this.executeExpressionPart(parts[0]) // parts are reduced to a single result\r\n\r\n        function findNextOp() { // returns an index of the next part\r\n            let index = -1\r\n            let maxPrecedence = Number.MIN_SAFE_INTEGER\r\n            for (let i = 0; i < parts.length; i++) {\r\n                const op = parts[i]\r\n                if (!op.isOperator) continue\r\n                if (maxPrecedence < op.precedence || (op.isUni && maxPrecedence === op.precedence)) {\r\n                    index = i\r\n                    maxPrecedence = op.precedence\r\n                }\r\n            }\r\n            return index\r\n        }\r\n\r\n        function removeElementAt(arr, ...indexes) {\r\n            return arr.filter((_, i) => !indexes.includes(i))\r\n        }\r\n\r\n        function isLastOperator() {\r\n            return parts.length === 2\r\n        }\r\n    }\r\n\r\n    async executeExpressionPart(expressionPart) {\r\n        this.stepper.step(expressionPart.source)\r\n        \r\n        if (expressionPart.isReference) {\r\n            if (!this.variables.hasVariable(expressionPart.varName)) throw new LangInterpretError(Errors.UNREFERENCED_VARIABLE, expressionPart.source - expressionPart.varName.length, expressionPart.varName)\r\n            return this.variables.getVariable(expressionPart.varName)\r\n        }\r\n        if (expressionPart.isFunctionExecution) {\r\n            const func = await this.executeExpressionPart(expressionPart.funcExp)\r\n            const params = await Promise.all(expressionPart.params.map(p => this.executeExpressionPart(p)))\r\n            return await this.executeFunctionCall(func, params)\r\n        }\r\n        if (expressionPart.isExpression) {\r\n            return await this.executeExpression(expressionPart)\r\n        }\r\n        if (Types.ARRAY === expressionPart.type) {\r\n            const arr = expressionPart.value\r\n            for (let i = 0; i < arr.length; i++) {\r\n                arr[i] = await this.executeExpressionPart(arr[i])\r\n            }\r\n        } else\r\n        if (Types.OBJECT === expressionPart.type) {\r\n            const obj = expressionPart.value\r\n            for (let k of Object.keys(obj)) {\r\n                obj[k] = await this.executeExpressionPart(obj[k])\r\n                if (obj[k].isObject || obj[k].isFunction) obj[k].parent = expressionPart\r\n            }\r\n        }\r\n        if (expressionPart.isFunction && !expressionPart.scope) {\r\n            expressionPart.scope = this.variables.copy()            \r\n        }\r\n        return expressionPart\r\n    }\r\n\r\n    async executeFunctionCall(f, params) {\r\n        if (f.isNative) {\r\n            const result = await f.call(...params)\r\n            return !result ? new LangVoid() : result\r\n        }\r\n\r\n        if ((!params && f.args) || params.length !== f.args.length) throw new LangInterpretError(Errors.FUNC_ARGUMENTS_MISHMASH, f.source)\r\n        // scoped variables\r\n        let i = 0\r\n        const variablesBak = this.variables\r\n        this.variables = f.scope.pushScope()\r\n        for (let arg of f.args) {\r\n            this.variables.setVariable(arg, params[i++], true)\r\n        }\r\n        if (f.parent) {\r\n            // cache \"this\" object into variable $\r\n            this.variables.setVariable('$', f.parent, true)\r\n        }\r\n        \r\n        try {\r\n            const body = f.body.copy()\r\n            const result = await this.executeBlock(body, false)\r\n            return result\r\n\r\n        } finally {  // clean up variables\r\n            this.variables.popScope()\r\n            this.variables = variablesBak\r\n        }\r\n    }\r\n\r\n    async executeAssignment(assignment) {\r\n        if (!assignment.left || !assignment.right) {\r\n            throw new LangInterpretError(Errors.WRONG_ASSIGNMENT, assignment.source)\r\n        }\r\n        const value = await this.executeExpressionPart(assignment.right)        \r\n        // variable assignment\r\n        if (assignment.left.isVariable) {\r\n            const variable = this.variables.getVariable(assignment.left.name)\r\n            if (variable.protected && variable.protected()) throw new LangInterpretError(Errors.PROTECTED_FROM_MODIFICATION, assignment.left.source)\r\n            this.variables.setVariable(assignment.left.name, value)\r\n        } else\r\n        // object attribute or array element assignment\r\n        if (assignment.left.isExpression) {\r\n            await this.executeExpression(assignment.left, value)\r\n        }\r\n        else throw new LangInterpretError(Errors.WRONG_ASSIGNEE_TYPE)\r\n    }\r\n\r\n    async executeWhile(whileStm) {\r\n        if (!whileStm.condition || !whileStm.condition.isExpression) throw new LangInterpretError(Errors.WRONG_CONDITION, whileStm.source)\r\n        while (true) {\r\n            const cond = await this.executeExpressionPart(whileStm.condition)\r\n            if (cond.type !== Types.BOOLEAN) throw new LangInterpretError(Errors.WRONG_CONDITION_VALUE, cond.source)\r\n            if (cond.value) await this.executeBlock(whileStm.body.copy())\r\n            else break\r\n        } \r\n    }\r\n\r\n    async executeIf(ifStm) {\r\n        if (!ifStm.condition || !ifStm.condition.isExpression) throw new LangInterpretError(Errors.WRONG_CONDITION, ifStm.source)\r\n        const cond = await this.executeExpressionPart(ifStm.condition)\r\n        if (cond.type !== Types.BOOLEAN) throw new LangInterpretError(Errors.WRONG_CONDITION_VALUE, cond.source)\r\n        if (cond.value) await this.executeBlock(ifStm.body)\r\n        else if (ifStm.elseBody) await this.executeBlock(ifStm.elseBody)\r\n    }\r\n}\r\n\r\nclass VariablesScope {\r\n    constructor(imports = {}) {\r\n        this.variables = new Map()\r\n        this.parent = null\r\n        if (imports) Object.entries(imports).forEach(([k,v]) => this.variables.set(k, v))\r\n    }\r\n\r\n    hasVariable(name) {\r\n        if (this.variables.has(name)) return true\r\n        if (this.variables.has('$')) {\r\n            const self = this.variables.get('$')\r\n            if (self.hasAttribute(name)) return true\r\n        }\r\n        if (this.parent) return this.parent.hasVariable(name)\r\n        return false\r\n    }\r\n\r\n    getVariable(name) {\r\n        if (this.variables.has(name)) return this.variables.get(name)\r\n        if (this.variables.has('$')) {\r\n            const self = this.variables.get('$')\r\n            if (self.hasAttribute(name)) return self.attribute(name)\r\n        }\r\n        if (this.parent) return this.parent.getVariable(name)\r\n        return false\r\n    }\r\n\r\n    setVariable(name, value, scoped = false) {\r\n        if (scoped) {\r\n            this.variables.set(name, value)\r\n            return\r\n        }\r\n        let found = false\r\n        let scope = this\r\n        do {\r\n            if (scope.variables.has(name)) {\r\n                scope.variables.set(name, value)\r\n                found = true\r\n            }\r\n            scope = scope.parent\r\n        } while (!found && scope)\r\n        \r\n        if (!found) {\r\n            this.variables.set(name, value)\r\n        }\r\n    }\r\n\r\n    pushScope() {\r\n        const newScope = new VariablesScope()\r\n        newScope.parent = this\r\n        return newScope\r\n    }\r\n\r\n    popScope() {\r\n        const parent = this.parent\r\n        this.parent = null\r\n        return parent\r\n    }\r\n\r\n    copy() {\r\n        const newScope = new VariablesScope(this.imports)\r\n        newScope.variables = this.variables\r\n        newScope.parent = this.parent\r\n        return newScope\r\n    }\r\n}\r\n\r\n// wrapper over a function call (func and params are not resolved yet)\r\nclass FunctionExecution {\r\n    constructor(funcExp, params) {\r\n        this.funcExp = funcExp\r\n        this.params = params\r\n        this.isFunctionExecution = true\r\n    }\r\n}\r\n\r\nclass ExecutionStepper {\r\n    constructor(maxSteps, isInterruptedFn) {\r\n        this.maxSteps = maxSteps\r\n        this.isInterruptedFn = isInterruptedFn\r\n        this.steps = 0        \r\n    }\r\n\r\n    step(source) {\r\n        if (this.isInterruptedFn && this.isInterruptedFn()) throw new LangInterrupt(Interruptions.USER_SUSSPEND)\r\n        this.steps++\r\n        if (this.steps > this.maxSteps) throw new LangInterpretError(Errors.EXECUTION_STEPS_EXCEEDED, source)\r\n    }\r\n\r\n    reset(maxSteps = null) {\r\n        this.steps = 0\r\n        if (maxSteps) this.maxSteps = maxSteps\r\n    }\r\n}\r\n\r\nmodule.exports = Interpret","const Keywords = {\r\n    TRUE: ['true', 'pravda', 'wahr'],\r\n    FALSE: ['false', 'nepravda', 'falsch'],\r\n    IF: ['if', 'pokud', 'falls'],\r\n    ELSE: ['else', 'jinak', 'sonst'],\r\n    WHILE: ['while', 'dokud', 'solange'],\r\n}\r\n\r\nconst FeatureLocalizations = {\r\n    SIZE: ['size', 'velikost', 'größe'],\r\n}\r\n\r\nconst Errors = {\r\n    INVALID_UNI_OPERATOR: 'INVALID_UNI_OPERATOR',\r\n    INVALID_BI_OPERATOR: 'INVALID_BI_OPERATOR',\r\n    UNEXPECTED_END: 'UNEXPECTED_END',\r\n    UNEXPECTED_SYMBOL: 'UNEXPECTED_SYMBOL',\r\n    EXPECTED_SYMBOL: 'EXPECTED_SYMBOL',\r\n    UNREFERENCED_VARIABLE: 'UNREFERENCED_VARIABLE',\r\n    UNEXPECTED_KEYWORD: 'UNEXPECTED_KEYWORD',\r\n    INVALID_IDENTIFIER: 'INVALID_IDENTIFIER',\r\n    UNEVEN_OPERATORS: 'UNEVEN_OPERATORS',\r\n    EXPECTED_FUNCTION: 'EXPECTED_FUNCTION',\r\n    EXPECTED_STATEMENT_END: 'EXPECTED_STATEMENT_END',\r\n    ARRAY_INDEX_NOT_NUMBER: 'ARRAY_INDEX_NOT_NUMBER',\r\n    ARRAY_INDEX_MISSING: 'ARRAY_INDEX_MISSING',\r\n    ARRAY_INDEX_OUT_BOUNDS: 'ARRAY_INDEX_OUT_BOUNDS',\r\n    FUNC_ARGUMENTS_MISHMASH: 'FUNC_ARGUMENTS_MISHMASH',\r\n    ATTRIBUTE_ALREADY_EXISTS: 'ATTRIBUTE_ALREADY_EXISTS',\r\n    ATTRIBUTE_NOT_FOUND: 'ATTRIBUTE_NOT_FOUND',\r\n    ELEMENT_NOT_FOUND: 'ELEMENT_NOT_FOUND',\r\n    EMPTY_EXPRESSION: 'EMPTY_EXPRESSION',\r\n    UNKNOWN_OPERATOR: 'UNKNOWN_OPERATOR',\r\n    OPERATOR_NOT_APPLICABLE: 'OPERATOR_NOT_APPLICABLE',\r\n    ACCESS_OPERATOR_EXPECTED: 'ACCESS_OPERATOR_EXPECTED',\r\n    WRONG_UNI_OPERATOR_SUBJECT: 'WRONG_UNI_OPERATOR_SUBJECT',\r\n    WRONG_BI_OPERATOR_SUBJECTS: 'WRONG_BI_OPERATOR_SUBJECTS',\r\n    UNMATCHING_BI_OPERATOR_SUBJECTS: 'UNMATCHING_BI_OPERATOR_SUBJECTS',\r\n    EXPECTED_ARRAY: 'EXPECTED_ARRAY',\r\n    EXPECTED_OBJECT: 'EXPECTED_OBJECT',\r\n    EXPECTED_IDENTIFIER: 'EXPECTED_IDENTIFIER',\r\n    WRONG_ASSIGNMENT: 'WRONG_ASSIGNMENT',\r\n    WRONG_ASSIGNEE_TYPE: 'WRONG_ASSIGNEE_TYPE',\r\n    READONLY_ATTRIBUTE: 'READONLY_ATTRIBUTE',\r\n    WRONG_CONDITION: 'WRONG_CONDITION',\r\n    WRONG_CONDITION_VALUE: 'WRONG_CONDITION_VALUE',\r\n    EXECUTION_STEPS_EXCEEDED: 'EXECUTION_STEPS_EXCEEDED',\r\n    PARSER_STEPS_EXCEEDED: 'PARSER_STEPS_EXCEEDED',\r\n    PROTECTED_FROM_MODIFICATION: 'PROTECTED_FROM_MODIFICATION',\r\n    DIVISION_BY_ZERO: 'DIVISION_BY_ZERO',\r\n    UNKNOWN_ERROR: 'UNKNOWN_ERROR',\r\n}\r\n\r\nconst Types = {\r\n    NUMBER: 'NUMBER',\r\n    BOOLEAN: 'BOOLEAN',\r\n    STRING: 'STRING',\r\n    ARRAY: 'ARRAY',\r\n    OBJECT: 'OBJECT',\r\n    FUNCTION: 'FUNCTION',\r\n    VOID: 'VOID',\r\n}\r\n\r\nconst Interruptions = {\r\n    USER_SUSSPEND: 'USER_SUSSPEND',\r\n}\r\n\r\nclass LangInterrupt {\r\n    constructor(id) {\r\n        this.id = id\r\n        this.isLangInterruption = true\r\n    }\r\n}\r\n\r\nclass LangError extends Error {\r\n    constructor(id, pos, arg1, arg2) {\r\n        super(id)\r\n        this.details = `${arg1 ? `\"${arg1}\"` : ''} ${arg2 ? `\"${arg2}\"` : ''}`\r\n        this.message = `${id} ${this.details}`\r\n        this.id = id\r\n        this.arg1 = arg1\r\n        this.arg2 = arg2\r\n        this.position = pos\r\n        this.isLangError = true\r\n    }\r\n}\r\n\r\nclass LangParseError extends LangError {\r\n    constructor(id, pos, arg1, arg2) {\r\n        super(id, pos, arg1, arg2)\r\n        this.isParseError = true\r\n    }\r\n}\r\n\r\nclass LangInterpretError extends LangError {\r\n    constructor(id, pos, arg1, arg2) {\r\n        super(id, pos, arg1, arg2)\r\n        this.isInterpretError = true\r\n    }\r\n}\r\n\r\nclass Block {\r\n    constructor(statements, source) {\r\n        this.statements = statements\r\n        this.source = source\r\n    }\r\n    copy() {\r\n        return new Block(this.statements.map(s => s.copy()), this.source)\r\n    }\r\n}\r\n\r\nclass Statement {\r\n    constructor(source) {\r\n        this.isExpression = false\r\n        this.isAssignment = false\r\n        this.isWhile = false\r\n        this.isIf = false\r\n        this.source = source\r\n    }\r\n    copy() {\r\n        return this // immutable\r\n    }\r\n}\r\n\r\nclass Assignment extends Statement {\r\n    constructor(left, right, source) {\r\n        super(source)\r\n        this.isAssignment = true\r\n        this.left = left\r\n        this.right = right\r\n    }\r\n    copy() {\r\n        return new Assignment(this.left.copy(), this.right.copy(), this.source)\r\n    }\r\n}\r\n\r\nclass While extends Statement {\r\n    constructor(condition, body, source) {\r\n        super(source)\r\n        this.isWhile = true\r\n        this.condition = condition\r\n        this.body = body\r\n    }\r\n    copy() {\r\n        return new While(this.condition.copy(), this.body.copy(), this.source)\r\n    }\r\n}\r\n\r\nclass If extends Statement {\r\n    constructor(condition, body, bodyElse, source) {\r\n        super(source)\r\n        this.isIf = true\r\n        this.condition = condition\r\n        this.body = body\r\n        this.elseBody = bodyElse\r\n    }\r\n    copy() {\r\n        return new If(this.condition.copy(), this.body.copy(),this.elseBody?.copy(), this.source)\r\n    }\r\n}\r\n\r\nclass Expression extends Statement {\r\n    constructor(parts, source) {\r\n        super(source)\r\n        this.isExpression = true\r\n        this.parts = parts\r\n    }\r\n    copy() {\r\n        return new Expression(this.parts.map(p => p.copy()), this.source)\r\n    }\r\n}\r\n\r\nclass Variable {\r\n    constructor(name, source) {\r\n        this.isVariable = true\r\n        this.name = name\r\n        this.source = source\r\n    }\r\n    copy() {\r\n        return this // immutable\r\n    }\r\n}\r\n\r\nclass Operator {\r\n    constructor(op, precedence = -1) {\r\n        this.op = op\r\n        this.isOperator = true\r\n        this.precedence = precedence\r\n    }\r\n    copy() {\r\n        return this // immutable\r\n    }\r\n}\r\n\r\nclass UniOperator extends Operator {\r\n    constructor(op, source) {\r\n        super(op)\r\n        this.isUni = true\r\n        this.precedence = this.getPrecedence()\r\n        this.source = source\r\n    }\r\n    apply(a) {\r\n        const fn = getFn(this.op)\r\n        if (!fn || !fn.call) throw new LangError(Errors.OPERATOR_NOT_APPLICABLE, null, this.op)\r\n        return fn.call()\r\n\r\n        function getFn(op) {\r\n            switch (op) {\r\n                case '!': \r\n                case '-': return a.neg\r\n                default: throw new LangError(Errors.INVALID_UNI_OPERATOR, null, this.op)\r\n            }\r\n        }\r\n    }\r\n    getPrecedence() { // based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\r\n        switch (this.op) {\r\n            case '!':\r\n            case '-': return 14\r\n            default: -1\r\n        }\r\n    }\r\n}\r\n\r\nclass BiOperator extends Operator {\r\n    constructor(op, source) {\r\n        super(op)\r\n        this.isBi = true\r\n        this.precedence = this.getPrecedence()\r\n        this.isAddition = '+' === op\r\n        this.source = source\r\n    }\r\n    apply(a, b) {\r\n        const fn = getFn(this.op)\r\n        if (!fn || !fn.call) {\r\n            if ('=' === this.op) return new LangBoolean(false)\r\n            throw new LangError(Errors.OPERATOR_NOT_APPLICABLE, null, this.op)\r\n        }\r\n        if ('/' === this.op && Types.NUMBER === b.type && b.value === 0) {\r\n            throw new LangError(Errors.DIVISION_BY_ZERO, null, this.op)\r\n        }\r\n        return fn.call(b)\r\n\r\n        function getFn(op) {\r\n            switch (op) {\r\n                case '*': return a.mult\r\n                case '/': return a.div\r\n                case '%': return a.mod\r\n                case '+': return a.plus\r\n                case '-': return a.minus\r\n                case '<': return a.lt\r\n                case '<=': return a.le\r\n                case '>': return a.gt\r\n                case '>=': return a.ge\r\n                case '=': return a.eq\r\n                case '!=': return a.ne\r\n                case '&': return a.and\r\n                case '|': return a.or\r\n                default: throw new LangError(Errors.INVALID_BI_OPERATOR, null, this.op)\r\n            }\r\n        }\r\n    }\r\n    getPrecedence() { // based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\r\n        switch (this.op) {\r\n            case '*':\r\n            case '/':\r\n            case '%': return 12\r\n            case '+': \r\n            case '-': return 11\r\n            case '<': \r\n            case '<=':\r\n            case '>':\r\n            case '>=': return 9\r\n            case '=': \r\n            case '!=': return 8\r\n            case '&': return 4\r\n            case '|': return 3\r\n            default: -1\r\n        }\r\n    }\r\n    shortCircuit(leftValue) {   // returs true if it should return immediatelly based on the left part value\r\n        return  '&' === this.op && !leftValue || '|' === this.op && leftValue\r\n    }\r\n}\r\n\r\nclass ArrayAccess extends Operator {\r\n    constructor(indexes, source) {\r\n        super('[]', 17)\r\n        this.isAccess = true\r\n        this.isArrayAccess = true\r\n        this.indexes = indexes\r\n        this.source = source\r\n    }\r\n    apply(a, indexes, newValue) { // indexes are resolved, but this.indexes are AST (expressions)\r\n        return a.element(indexes, newValue)\r\n    }\r\n}\r\n\r\nclass ObjectAccess extends Operator {\r\n    constructor(attrName, source) {\r\n        super('.', 17)\r\n        this.isAccess = true\r\n        this.isObjectAccess = true\r\n        this.attrName = attrName\r\n        this.source = source\r\n    }\r\n    apply(o, newValue) {\r\n        return o.attribute(this.attrName, newValue)\r\n    }\r\n}\r\n\r\nclass FunctionCall extends Operator {\r\n    constructor(params, source) {\r\n        super('()', 17)\r\n        this.isAccess = true\r\n        this.isCall = true\r\n        this.params = params\r\n        this.source = source\r\n    }\r\n}\r\n\r\nclass VarReference {\r\n    constructor(varName, source) {\r\n        this.isReference = true\r\n        this.varName = varName\r\n        this.source = source\r\n    }\r\n    copy() {\r\n        return this // immutable\r\n    }\r\n}\r\n\r\nclass LangObject {\r\n    constructor(obj, source, type = Types.OBJECT) {\r\n        this.value = obj\r\n        this.type = type\r\n        this.isObject = true\r\n        this.parent = null\r\n        this.source = source\r\n\r\n        this.eq = new LangNativeFunction(x => new LangBoolean(areObjectsEqual(this, x)))\r\n        this.ne = new LangNativeFunction(x => new LangBoolean(!(this.eq.call(x).value)))\r\n    }\r\n    attribute(name, newValue) {\r\n        const value = this[name] ? this[name] : this.value[name] // explicit attrs have priority over native ones\r\n        if (newValue && this.value[name]) this.value[name] = newValue\r\n        if (value) return value\r\n        if (this.parent) return this.parent.attribute(name)\r\n    }\r\n    hasAttribute(name) {\r\n        const hasValue = this[name] || this.value[name]\r\n        return hasValue || (this.parent && this.parent.hasAttribute(name))\r\n    }\r\n    protected() {\r\n        return this.isProtected || (this.parent && this.parent.protected())\r\n    }\r\n    protectedAttributes() {\r\n        return this.protected()\r\n    }\r\n    copy() {\r\n        const valueCopy = {}\r\n        Object.keys(this.value).forEach(k => valueCopy[k] = this.value[k].copy())\r\n        return new LangObject(valueCopy, this.source)\r\n    }\r\n}\r\n\r\nclass LangValueObject extends LangObject {\r\n    constructor(value, source, type) {\r\n        super(value, source, type)\r\n\r\n        this.eq = new LangNativeFunction(x => new LangBoolean(this.value === x.value))\r\n        this.ne = new LangNativeFunction(x => new LangBoolean(this.value !== x.value))\r\n    }\r\n    copy() {\r\n        return this // immutable\r\n    }\r\n}\r\n\r\nclass LangNumber extends LangValueObject {\r\n    constructor(value, source) {\r\n        super(value, source, Types.NUMBER)\r\n        this.isPrimitive = true\r\n        \r\n        this.mult = new LangNativeFunction(x => new LangNumber(this.value * x.value))\r\n        this.div = new LangNativeFunction(x => new LangNumber(this.value / x.value))\r\n        this.mod = new LangNativeFunction(x => new LangNumber(this.value % x.value))\r\n        this.plus = new LangNativeFunction(x => new LangNumber(this.value + x.value))\r\n        this.minus = new LangNativeFunction(x => new LangNumber(this.value - x.value))\r\n        this.lt = new LangNativeFunction(x => new LangBoolean(this.value < x.value))\r\n        this.le = new LangNativeFunction(x => new LangBoolean(this.value <= x.value))\r\n        this.gt = new LangNativeFunction(x => new LangBoolean(this.value > x.value))\r\n        this.ge = new LangNativeFunction(x => new LangBoolean(this.value >= x.value))\r\n        this.neg = new LangNativeFunction(() => new LangNumber(-this.value))\r\n        this.sum = new LangNativeFunction((...x) => new LangNumber(x.reduce((a,c) => a + c.value, this.value)))\r\n        this.round = new LangNativeFunction(() => new LangNumber(Math.round(this.value)))\r\n        this.floor = new LangNativeFunction(() => new LangNumber(Math.floor(this.value)))\r\n        this.ceil = new LangNativeFunction(() => new LangNumber(Math.ceil(this.value)))\r\n    }\r\n}\r\n\r\nclass LangString extends LangValueObject {\r\n    constructor(value, source) {\r\n        super(value, source, Types.STRING)\r\n        this.isPrimitive = true\r\n\r\n        this.concat = new LangNativeFunction(x => new LangString(this.value + x.value))\r\n        this.length = new LangNativeFunction(() => new LangNumber(this.value.length))\r\n        this.charAt = new LangNativeFunction(i => new LangString(this.value.charAt(i.value)))\r\n        this.sub = new LangNativeFunction((i, j) => {\r\n            if (i.value > this.value.length - 1 || i.value < 0 || (j && j.value <= i.value) || (j && j.value > this.value.length)) return new LangString('')\r\n            return new LangString(this.value.substring(i.value, j ? j.value : this.value.length))\r\n        })\r\n        \r\n        this.plus = this.concat\r\n        for (let s of FeatureLocalizations.SIZE) this[s] = new LangNumber(this.value.length)\r\n    }\r\n}\r\n\r\nclass LangBoolean extends LangValueObject {\r\n    constructor(value, source) {\r\n        super(value, source, Types.BOOLEAN)\r\n        this.isPrimitive = true\r\n\r\n        this.and = new LangNativeFunction(x => new LangBoolean(this.value && x.value))\r\n        this.or = new LangNativeFunction(x => new LangBoolean(this.value || x.value))\r\n        this.xor = new LangNativeFunction(x => new LangBoolean(this.value ? !x.value : x.value))\r\n        this.nand = new LangNativeFunction(x => new LangBoolean(!(this.value && x.value)))\r\n        this.neg = new LangNativeFunction(() => new LangBoolean(!this.value))\r\n\r\n        this.mult = this.and\r\n        this.plus = this.or\r\n    }\r\n}\r\n\r\nclass LangArray extends LangValueObject {\r\n    constructor(value, source) {\r\n        super(value, source, Types.ARRAY)\r\n\r\n        this.concat = new LangNativeFunction(x => new LangArray(this.value.concat(x.value)))\r\n\r\n        this.plus = this.concat\r\n        for (let s of FeatureLocalizations.SIZE) this[s] = new LangNumber(this.value.length)\r\n\r\n        this.eq = new LangNativeFunction(x => {\r\n            if (!x || !x.value) return new LangBoolean(false)\r\n            if (this.value.length !== x.value.length) return new LangBoolean(false)\r\n            for (let i = 0; i < this.value.length; i++)\r\n                if (!this.value[i].eq || !this.value[i].eq.isNative || !this.value[i].eq.call(x.value[i]).value) return new LangBoolean(false)\r\n            return new LangBoolean(true)\r\n        })\r\n        this.ne = new LangNativeFunction(x => new LangBoolean(!(this.eq.call(x).value)))\r\n    }\r\n    element(indexes, newValue) {\r\n        return indexes.reduce((a,c,i) => {\r\n            const index = Math.ceil(c.value)\r\n            if (index < 0 || index >= a.value.length) throw new LangError(Errors.ARRAY_INDEX_OUT_BOUNDS, null, index)\r\n            const v = a.value[index]\r\n            // set the value for the last element\r\n            if (newValue && i === indexes.length - 1)\r\n                a.value[index] = newValue            \r\n            return v\r\n        }, this)\r\n    }\r\n    attribute(name, newValue) {\r\n        if (FeatureLocalizations.SIZE.includes(name.toLowerCase())) {\r\n            if (newValue) throw new LangError(Errors.READONLY_ATTRIBUTE)\r\n            return new LangNumber(this.value.length)\r\n        }\r\n        return super.attribute(name, newValue)\r\n    }\r\n    hasAttribute(name) {\r\n        return FeatureLocalizations.SIZE.includes(name.toLowerCase()) || super.attribute(name, newValue)\r\n    }\r\n    copy() {\r\n        return new LangArray(this.value.map(p => p.copy()), this.source)\r\n    }\r\n}\r\n\r\nclass LangVoid extends LangValueObject {\r\n    constructor(source) {\r\n        super(null, source, Types.VOID)\r\n\r\n        this.eq = new LangNativeFunction(x => new LangBoolean(false))\r\n        this.ne = new LangNativeFunction(x => new LangBoolean(false))\r\n    }\r\n}\r\n\r\nclass LangFunction {\r\n    constructor(body, args, funcId, source) {\r\n        this.type = Types.FUNCTION\r\n        this.body = body\r\n        this.args = args\r\n        this.isFunction = true\r\n        this.source = source\r\n        this.funcId = funcId\r\n\r\n        this.eq = new LangNativeFunction(g => new LangBoolean(g.funcId === this.funcId))\r\n        this.ne = new LangNativeFunction(g => new LangBoolean(g.funcId !== this.funcId))\r\n    }\r\n    attribute(name, newValue) {\r\n        if (newValue) throw new LangError(Errors.READONLY_ATTRIBUTE)\r\n        const value = this[name] ? this[name] : this.value[name] // explicit attrs have priority over native ones\r\n        if (value) return value\r\n    }\r\n    hasAttribute(name) {\r\n        return this[name] || this.value[name]\r\n    }\r\n    protectedAttributes() {\r\n        return true\r\n    }\r\n    copy() {\r\n        return new LangFunction(this.body, this.args, this.funcId, this.source)\r\n    }\r\n}\r\n\r\nclass LangNativeFunction {\r\n    constructor(func, source) {\r\n        this.type = Types.FUNCTION\r\n        this.func = func\r\n        this.isNative = true\r\n        this.source = source\r\n    }\r\n    call(...params) {\r\n        return this.func(...params)\r\n    }\r\n    copy() {\r\n        return this // immutable\r\n    }\r\n}\r\n\r\nfunction areObjectsEqual(a, b) {\r\n    const aKeys = Object.keys(a.value)\r\n    const bKeys = Object.keys(b.value)\r\n    if (aKeys.length !== bKeys.length) return false\r\n    for (k of aKeys) {\r\n        if (!a.value[k].eq.call(b.value[k])) return false\r\n    }\r\n    return true\r\n}\r\n\r\nmodule.exports = {\r\n    Keywords,\r\n    Errors,\r\n    Interruptions,\r\n    Types,\r\n    Block,\r\n    Assignment,\r\n    While,\r\n    If,\r\n    Expression,\r\n    Variable,\r\n    UniOperator,\r\n    BiOperator,\r\n    ArrayAccess,\r\n    ObjectAccess,\r\n    FunctionCall,\r\n    VarReference,\r\n    ParseError: LangParseError,\r\n    InterpretError: LangInterpretError,\r\n    Interrupt: LangInterrupt,\r\n    Object: LangObject,\r\n    Number: LangNumber,\r\n    String: LangString,\r\n    Boolean: LangBoolean,\r\n    Array: LangArray,\r\n    Function: LangFunction,\r\n    NativeFunction: LangNativeFunction,\r\n    Void: LangVoid,\r\n}","const lang = require('./lang')\r\nconst Parser = require('./parser')\r\nconst Interpret = require('./interpreter')\r\n\r\nclass LudolfC {\r\n    /**\r\n     * @param {object} imports \r\n     * @param {isInterrupted: () => boolean} controls \r\n     */\r\n    constructor(imports = {}, controls = {}) {\r\n        this.parser = new Parser()\r\n        this.interpret = new Interpret(imports, controls)\r\n    }\r\n\r\n    /**\r\n     * Execute LudolfC code.\r\n     * @param {string} code \r\n     * @returns result of the execution\r\n     */\r\n    async execute(code) {\r\n        try {\r\n            const ast = this.parser.parse(code)\r\n            return await this.interpret.execute(ast)\r\n\r\n        } catch (e) {\r\n            if (e.isLangError && (e.position || e.position === 0)) {\r\n                const {line, col} = lineAndCol(this.parser.source.code, e.position)\r\n                e.line = line\r\n                e.col = col\r\n            }\r\n            throw e\r\n        }\r\n    }\r\n\r\n    hasVariable(name) {\r\n        return this.interpret.variables.hasVariable(name)\r\n    }\r\n\r\n    getVariable(name) {\r\n        return this.interpret.variables.getVariable(name)\r\n    }\r\n}\r\n\r\nfunction lineAndCol(code, position) {\r\n    let line = 1    // starting from 1\r\n    let col = 1\r\n    for (let i = 0; i < code.length && i <= position; i++) {\r\n        col++\r\n        if ('\\n' === code.charAt(i)) {\r\n            line++\r\n            col = 1\r\n        }\r\n    }\r\n    col = Math.max(1, col - 1)\r\n    return {line, col}\r\n}\r\n\r\nmodule.exports = { LudolfC, lang }\r\n","const { \r\n    Errors,\r\n    Keywords,\r\n    Block,\r\n    Assignment,\r\n    While,\r\n    If,\r\n    Expression,\r\n    Variable,\r\n    UniOperator,\r\n    BiOperator,\r\n    ArrayAccess,\r\n    ObjectAccess,\r\n    FunctionCall,\r\n    VarReference,\r\n    ParseError: LangParseError,\r\n    Object: LangObject,\r\n    Number: LangNumber,\r\n    String: LangString,\r\n    Boolean: LangBoolean,\r\n    Array: LangArray,\r\n    Function: LangFunction,\r\n    Void: LangVoid } = require('./lang')\r\n\r\nconst UniOperators = ['!', '-']\r\nconst BiOperators = ['*', '/', '%', '+', '-', '<', '<=', '>', '>=', '=', '!=', '&', '|']\r\n\r\nconst RE_NATIONAL_CHARS = `ěščřžťďýáíéúůüöäňñĚŠČŘŽŤĎÝÁÍÉÚŮÜÖÄŇÑß`\r\nconst RE_IDENTIFIER = `[a-zA-Z_${RE_NATIONAL_CHARS}][a-zA-Z0-9_${RE_NATIONAL_CHARS}]*`\r\nconst RE_FUNCTION = `\\\\((\\\\s*(${RE_IDENTIFIER})\\\\s*(,\\\\s*(${RE_IDENTIFIER}))*)?\\\\s*\\\\)\\\\s*\\{(.|\\\\s)*\\\\}`\r\n\r\nclass Source {\r\n    constructor(code, startingAt = 0) {\r\n        this.code = removeComments(code + '\\n')\r\n        this.pos = 0\r\n        this.startingAt = startingAt\r\n\r\n        function removeComments(s) {\r\n            if (!s.length) return s\r\n            let res = ''\r\n            let quote = null\r\n            let inString = false\r\n            let inComment = false\r\n            let i = 0\r\n            for (; i < s.length - 1; i++) {\r\n                const c = s.charAt(i)\r\n\r\n                if (!inString && isStringStarting(c)) {\r\n                    inString = true\r\n                    quote = c\r\n                }\r\n                else if (inString && isStringEnding(c, quote)) {\r\n                    inString = false\r\n                    quote = null\r\n                }\r\n                else if (!inString && c === '/' && s.charAt(i + 1) === '/') inComment = true\r\n                else if (c === '\\n') inComment = false\r\n\r\n                if (!inComment) res += c\r\n            }\r\n            return res + s.charAt(s.length - 1)\r\n        }\r\n    }\r\n\r\n    move(step = 1) {\r\n        this.pos += step\r\n    }\r\n\r\n    currentChar() {\r\n        return this.code.charAt(this.pos)\r\n    }\r\n\r\n    remaining(length = undefined) {\r\n        return this.code.substring(this.pos, Math.min(length ? this.pos + length : this.code.length - 1, this.code.length - 1))\r\n    }\r\n\r\n    next(length = 1) {\r\n        return this.code.substring(Math.min(this.pos + 1, this.code.length - 1), Math.min(this.pos + 1 + length, this.code.length - 1))\r\n    }\r\n\r\n    finished() {\r\n        return this.pos >= this.code.length\r\n    }\r\n\r\n    absPos() {\r\n        return this.pos + this.startingAt - /* last move */ 1 \r\n    }\r\n}\r\n\r\nclass Parser {\r\n    constructor() {    \r\n        this.steps = 0\r\n        this.maxSteps = 1000000 // to prevent infinite loops\r\n        this.fcount = 0 // counter for function IDs\r\n        this.source = new Source('')\r\n    }\r\n\r\n    parse(code) {\r\n        this.steps = 0\r\n        this.source = new Source(code)\r\n        return this.parseBlock(this.source)\r\n    }\r\n\r\n    parseBlock(source) {\r\n        const statements = []\r\n        while (!source.finished()) {\r\n            const stm = this.parseStatement(source)\r\n            if (stm) statements.push(stm)\r\n        }\r\n        return new Block(statements, source.absPos())\r\n    }\r\n\r\n    parseStatement(source) {\r\n        this._stepper()\r\n\r\n        let token = ''\r\n        \r\n        let expecting = null\r\n        let inAssignment = false\r\n\r\n        const openDefinitions = {\r\n            arrays: 0,  // [\r\n            objects: 0, // {\r\n            groups: 0, // (\r\n            ops: 0, // + - * / < > <= >=\r\n        }\r\n\r\n        for (; !source.finished(); source.move()) {\r\n            this._stepper()\r\n\r\n            const c = source.currentChar()\r\n\r\n            // consume the whole string to prevent space-ignoring\r\n            if (!inAssignment && isStringStarting(c)) {\r\n                let cc = c\r\n                do {\r\n                    token += cc\r\n                    source.move()\r\n                    cc = source.currentChar()\r\n                } while (!source.finished() && !isStringEnding(cc, c))\r\n            }\r\n            \r\n            // ignore spaces (except space between numbers)\r\n            if (!expecting && isSpace(c) && isSpace(token.charAt(token.length - 1))) continue\r\n\r\n            if (expecting && c !== expecting) {\r\n                throw new LangParseError(Errors.EXPECTED_SYMBOL, source.absPos(), expecting, c)\r\n            }\r\n            if (expecting === '=' && c === expecting) {\r\n                inAssignment = true\r\n                expecting = null\r\n                continue\r\n            }\r\n\r\n            if ('[' === c) openDefinitions.arrays++\r\n            if (']' === c) openDefinitions.arrays--\r\n            if ('{' === c) openDefinitions.objects++\r\n            if ('}' === c) openDefinitions.objects--\r\n            if ('(' === c) openDefinitions.groups++\r\n            if (')' === c) openDefinitions.groups--\r\n            \r\n            if ('+' === c || '-' === c || '*' === c || '/' === c || '<' === c || '>' === c || '=' === c) openDefinitions.ops++\r\n            else openDefinitions.ops && !isSpace(c, true) && openDefinitions.ops--\r\n\r\n            // end of the statement\r\n            if (isStatementSeparator(c) && !openDefinitions.arrays && !openDefinitions.objects && !openDefinitions.groups && !openDefinitions.ops) {\r\n                source.move()\r\n                break\r\n            }\r\n\r\n            // while\r\n            if (isWhileDef(source.remaining())) {\r\n                if (token.length) {\r\n                    throw new LangParseError(Errors.UNEXPECTED_SYMBOL, source.absPos(), token)\r\n                }\r\n                consumeSpaces(source)\r\n                consumeUntil(source, '\\\\s')\r\n                const def = this.parseWhile(source)\r\n                consumeSpaces(source, true)\r\n                if (!isStatementSeparator(source.currentChar())) throw new LangParseError(Errors.EXPECTED_STATEMENT_END, source.absPos())\r\n                return def\r\n            }\r\n\r\n            // if\r\n            if (isIfDef(source.remaining())) {\r\n                if (token.length) {\r\n                    throw new LangParseError(Errors.UNEXPECTED_SYMBOL, token)\r\n                }\r\n                const def = this.parseIfStatement(source)\r\n                return def\r\n            }\r\n\r\n            if (':' === c && !openDefinitions.objects) {    // assignment starting\r\n                if (!(token.trim().length)) throw new LangParseError(Errors.UNEXPECTED_SYMBOL, source.absPos(), c)\r\n                if (isKeyword(token.trim())) throw new LangParseError(Errors.UNEXPECTED_KEYWORD, source.absPos(), c)\r\n                expecting = '='\r\n            } else\r\n            if (inAssignment) {  // variable assignment                \r\n                const value = this.parseExpression(source, openDefinitions)\r\n                token = token.trim()\r\n                if (isIdentifier(token)) {\r\n                    const variable = new Variable(token, source.absPos())\r\n                    const assignment = new Assignment(variable, value, source.absPos())\r\n                    return assignment\r\n                } else {\r\n                    const exp = this.parseExpression(new Source(token, source.absPos() - token.length), {})\r\n                    if (!exp || exp.parts.some(p => p.isOperator && !p.isAccess))\r\n                        throw new LangParseError(Errors.INVALID_IDENTIFIER, source.absPos(), token)\r\n                    const assignment = new Assignment(exp, value, source.absPos())\r\n                    return assignment\r\n                }\r\n            }\r\n            else {\r\n                token += c\r\n            }\r\n        }\r\n\r\n        // statement is an expression\r\n        if (token.length) {\r\n            const exp = this.parseExpression(new Source(token, source.absPos() - token.length), {})\r\n            return exp\r\n        }\r\n    }\r\n\r\n    parseExpression(source, openDefinitions, inGrouping = null) {\r\n        this._stepper()\r\n\r\n        const parts = []\r\n\r\n        while (!source.finished()) {\r\n            this._stepper()\r\n\r\n            const c = source.currentChar()\r\n\r\n            // spaces\r\n            if (isSpace(c)) {\r\n                source.move()\r\n                continue\r\n            }\r\n\r\n            // end of the statement\r\n            if (isStatementSeparator(c) || ')' === c || ']' === c || '}' === c || ',' === c) {\r\n                if ((')' === c || ']' === c || '}' === c) && ((!inGrouping && inGrouping !== c) || !parts.length)) {\r\n                    throw new LangParseError(Errors.UNEXPECTED_SYMBOL, source.absPos(), c)\r\n                }\r\n                // return the list of tokens and operators\r\n                if (parts.length && (!parts[parts.length - 1].isOperator || parts[parts.length - 1].isAccess))\r\n                    return new Expression(parts, source.absPos())\r\n                \r\n                source.move()\r\n                continue\r\n            }\r\n\r\n            // function defition\r\n            if (isFunctionDef(source.remaining())) {\r\n                if (parts.length && !parts[parts.length - 1].isOperator) {\r\n                    throw new LangParseError(Errors.UNEXPECTED_SYMBOL, source.absPos(), c)\r\n                }\r\n                const fn = this.parseFunction(source)\r\n                parts.push(fn)\r\n                continue\r\n            }\r\n\r\n            // object definition\r\n            if ('{' === c) {\r\n                if (!leftOperatorExpected()) {\r\n                    throw new LangParseError(Errors.UNEXPECTED_SYMBOL, source.absPos(), c)\r\n                }\r\n                source.move()\r\n                const attributes = this.readAttributes(source, ')')\r\n\r\n                consumeSpaces(source)\r\n                if ('}' === source.currentChar()) {\r\n                    const obj = new LangObject(attributes, source.absPos())\r\n                    // set the self reference\r\n                    for (let attr of Object.values(attributes)) {\r\n                        if (attr.isObject) {\r\n                            attr.parent = obj\r\n                        }\r\n                    }\r\n                    parts.push(obj)                    \r\n                    source.move()\r\n                    openDefinitions.objects--\r\n                    continue\r\n                }\r\n                throw new LangParseError(Errors.UNEXPECTED_SYMBOL, source.absPos(), source.currentChar(), '}')\r\n            }\r\n\r\n            // grouping or a function call\r\n            if ('(' === c) {\r\n                source.move()\r\n                if (rightOperatorExpected()) {    // a function call\r\n                    const params = this.readList(source, ')')\r\n                    consumeSpaces(source)\r\n    \r\n                    if (')' === source.currentChar()) {\r\n                        var call = new FunctionCall(params, source.absPos())\r\n                        parts.push(call)\r\n                        source.move()\r\n                    } else {\r\n                        throw new LangParseError(Errors.UNEXPECTED_SYMBOL, source.absPos(), source.currentChar(), ')')\r\n                    }\r\n                } else {    // grouping\r\n                    const exp = this.parseExpression(source, openDefinitions, true)\r\n                    parts.push(exp)\r\n                    consumeSpaces(source)\r\n                    if (')' !== source.currentChar()) throw new LangParseError(Errors.EXPECTED_SYMBOL, source.absPos(), ')')\r\n                    source.move()\r\n                }\r\n                continue\r\n            }\r\n\r\n            // object attribute access\r\n            if ('.' === c && rightOperatorExpected()) {\r\n                source.move()\r\n                const attrName = this.readIdentifier(source)               \r\n                parts.push(new ObjectAccess(attrName, source.absPos()))\r\n                continue\r\n            }\r\n\r\n            // array\r\n            if ('[' === c) {\r\n                source.move()\r\n                if (rightOperatorExpected()) { // array access\r\n                    const indexes = this.readList(source, ']')\r\n                    consumeSpaces(source)\r\n\r\n                    if (!indexes.length) throw new LangParseError(Errors.ARRAY_INDEX_MISSING, source.absPos())\r\n\r\n                    if (']' === source.currentChar()) {\r\n                        if (indexes.some(i => !i.isExpression || !i.parts.length)) throw new LangParseError(Errors.ARRAY_INDEX_NOT_NUMBER, source.absPos())\r\n                        source.move()\r\n                        parts.push(new ArrayAccess(indexes, source.absPos()))\r\n                    } else {\r\n                        throw new LangParseError(Errors.UNEXPECTED_SYMBOL, source.absPos(), source.currentChar(), ']')\r\n                    }\r\n                } else {    // array definition\r\n                    const elements = this.readList(source, ']')\r\n                    consumeSpaces(source)\r\n    \r\n                    if (']' === source.currentChar()) {\r\n                        parts.push(new LangArray(elements, source.absPos()))\r\n                        source.move()\r\n                        openDefinitions.arrays--\r\n                    } else {\r\n                        throw new LangParseError(Errors.UNEXPECTED_SYMBOL, source.absPos(), source.currentChar(), ']')\r\n                    }\r\n                }\r\n                continue\r\n            }\r\n\r\n            // operators\r\n            if (leftOperatorExpected()) {\r\n                if (UniOperators.includes(c)) {\r\n                    parts.push(new UniOperator(c, source.absPos()))\r\n                    source.move()\r\n                    if (isSpace(source.currentChar())) throw new LangParseError(Errors.UNEXPECTED_SYMBOL, source.absPos(), source.currentChar())\r\n                    continue\r\n                }\r\n            } else \r\n            if (rightOperatorExpected()) {\r\n                const next2 = source.remaining(2)\r\n                if (BiOperators.includes(next2)) {\r\n                    parts.push(new BiOperator(next2, source.absPos()))\r\n                    source.move(next2.length)\r\n                    continue\r\n                }\r\n                if (BiOperators.includes(c)) {\r\n                    parts.push(new BiOperator(c, source.absPos()))\r\n                    source.move()\r\n                    continue\r\n                }\r\n            }\r\n\r\n            if (rightOperatorExpected()) throw new LangParseError(Errors.UNEXPECTED_SYMBOL, source.absPos(), source.currentChar())\r\n\r\n            const exp = this.parseMemberExpression(source)\r\n            parts.push(exp)\r\n        }\r\n\r\n        // after finished, the statement must be complete\r\n        if (endsWithOperator()) throw new LangParseError(Errors.UNEVEN_OPERATORS, source.absPos() - 1) \r\n\r\n        // ///////////////////////////////////////////\r\n\r\n        function leftOperatorExpected() {\r\n            return !parts.length || (parts[parts.length - 1].isOperator && !parts[parts.length - 1].isAccess)\r\n        }\r\n\r\n        function rightOperatorExpected() {\r\n            return parts.length && (!parts[parts.length - 1].isOperator || parts[parts.length - 1].isAccess)\r\n        }\r\n\r\n        function endsWithOperator() {\r\n            return parts.length && (parts[parts.length - 1].isOperator && !parts[parts.length - 1].isAccess)\r\n        }\r\n    }\r\n\r\n    parseMemberExpression(source) {\r\n        this._stepper()\r\n\r\n        let token = ''\r\n\r\n        for (; !source.finished(); source.move()) {\r\n            this._stepper()\r\n            \r\n            const c = source.currentChar()\r\n\r\n            // token ends\r\n            if (isExpressionSeparator(c)) {\r\n                if ('.' === c && /^(0|([1-9][0-9]*))$/.test(token) && /[0-9]/.test(source.next())) { // float number\r\n                    token += c\r\n                    continue\r\n                }\r\n                if (Keywords.TRUE.includes(token.toLowerCase())) {\r\n                    return new LangBoolean(true, source.absPos())\r\n                }\r\n                if (Keywords.FALSE.includes(token.toLowerCase())) {\r\n                    return new LangBoolean(false, source.absPos())\r\n                }\r\n                if (isNumeric(token)) {\r\n                    return new LangNumber(token.includes('.') ? parseFloat(token) : parseInt(token), source.absPos())\r\n                } \r\n                if (isIdentifier(token) || '$' === token) {\r\n                    return new VarReference(token, source.absPos())\r\n                }\r\n                throw new LangParseError(Errors.UNEXPECTED_SYMBOL, source.absPos(), token)\r\n            }\r\n\r\n            if (isStringStarting(c)) {\r\n                source.move()\r\n                return new LangString(this.readString(source, c), source.absPos())\r\n            }\r\n\r\n            token += c\r\n        }\r\n    }\r\n\r\n    parseIfStatement(source) {\r\n        consumeSpaces(source)\r\n        consumeUntil(source, '\\\\s')\r\n        const def = this.parseIf(source)\r\n        consumeSpaces(source, true)\r\n\r\n        let newLine = isStatementSeparator(source.currentChar())\r\n        consumeSpaces(source)\r\n\r\n        if (isElseDef(source.remaining())) {\r\n            consumeUntil(source, '\\\\s')\r\n            def.elseBody = this.parseBody(source)\r\n            consumeSpaces(source, true)\r\n        } else\r\n        if (isElseIfDef(source.remaining())) {\r\n            consumeUntil(source, '\\\\s')\r\n            const elseIf = this.parseIfStatement(source)\r\n            def.elseBody = new Block([elseIf], source.absPos())\r\n            newLine = true\r\n        }\r\n        if (!newLine && !isStatementSeparator(source.currentChar())) throw new LangParseError(Errors.EXPECTED_STATEMENT_END, source.absPos())\r\n        return def\r\n    }\r\n\r\n    readList(source, groupingCloseChar) {\r\n        consumeSpaces(source)\r\n        if (groupingCloseChar === source.currentChar()) {\r\n            return []\r\n        } else {    // multiple params\r\n            const params = []\r\n            do {\r\n                const value = this.parseExpression(source, {}, groupingCloseChar)\r\n                params.push(value)\r\n\r\n                consumeSpaces(source)\r\n\r\n            } while(',' === source.currentChar() && !source.finished())\r\n\r\n            return params\r\n        }\r\n    }\r\n\r\n    readAttributes(source) {\r\n        consumeSpaces(source)\r\n        if ('}' === source.currentChar()) {\r\n            return {}\r\n        } else {    // multiple attributes\r\n            const attributes = {}\r\n            let first = true\r\n            do {\r\n                if (!first) {\r\n                    source.move()\r\n                }\r\n                first = false\r\n                consumeSpaces(source)\r\n\r\n                const name = this.readIdentifier(source)\r\n                if (attributes[name]) {\r\n                    throw new LangParseError(Errors.ATTRIBUTE_ALREADY_EXISTS, source.absPos(), name)\r\n                }\r\n                consumeSpaces(source)\r\n\r\n                if (':' !== source.currentChar()) {\r\n                    throw new LangParseError(Errors.EXPECTED_SYMBOL, source.absPos(), ':', source.currentChar())\r\n                }\r\n                source.move()\r\n\r\n                const value = this.parseExpression(source, {}, '}')\r\n                attributes[name] = value\r\n\r\n                consumeSpaces(source)\r\n\r\n            } while(',' === source.currentChar() && !source.finished())\r\n\r\n            return attributes\r\n        }\r\n    }\r\n\r\n    parseWhile(source) {\r\n        const condCode = this.readUntilBodyOpens(source)\r\n        const cond = this.parseExpression(new Source(condCode, source.absPos() - condCode.length), {}, null)\r\n        const body = this.parseBody(source)\r\n        return new While(cond, body, source.absPos())\r\n    }\r\n\r\n    parseIf(source) {\r\n        const condCode = this.readUntilBodyOpens(source)\r\n        const cond = this.parseExpression(new Source(condCode, source.absPos() - condCode.length), {}, null)\r\n        const body = this.parseBody(source)\r\n        return new If(cond, body, null, source.absPos())\r\n    }\r\n\r\n    parseFunction(source) {\r\n        const args = this.readArguments(source)\r\n        const body = this.parseBody(source)\r\n        return new LangFunction(body, args, ++this.fcount, source.absPos())\r\n    }\r\n\r\n    readArguments(source) {\r\n        consumeSpaces(source)\r\n\r\n        if ('(' !== source.currentChar()) {\r\n            throw new LangParseError(Errors.EXPECTED_SYMBOL, source.absPos(), '(', source.currentChar())\r\n        }       \r\n        source.move()\r\n        consumeSpaces(source) \r\n\r\n        const args = []\r\n        let first = true\r\n        while((',' === source.currentChar() || ')' !== source.currentChar()) && !source.finished()) {\r\n            if (!first) source.move()\r\n            first = false\r\n\r\n            const name = this.readIdentifier(source)\r\n            args.push(name)\r\n\r\n            consumeSpaces(source)\r\n        }\r\n\r\n        if (')' !== source.currentChar()) {\r\n            throw new LangParseError(Errors.EXPECTED_SYMBOL, source.absPos(), ')', source.currentChar())\r\n        }\r\n        source.move()\r\n        return args\r\n    }\r\n\r\n    parseBody(source) {\r\n        consumeSpaces(source)\r\n\r\n        if ('{' !== source.currentChar()) {\r\n            throw new LangParseError(Errors.EXPECTED_SYMBOL, source.absPos(), '{', source.currentChar())\r\n        }\r\n\r\n        source.move()\r\n        consumeSpaces(source)\r\n\r\n        let body = ''\r\n        let openQuotings = 0\r\n        while((openQuotings || '}' !== source.currentChar()) && !source.finished()) {\r\n            const c = source.currentChar()\r\n            body += c\r\n            source.move()\r\n\r\n            if ('{' === c) openQuotings++\r\n            if ('}' === c) openQuotings--\r\n        } \r\n\r\n        if ('}' !== source.currentChar()) {\r\n            throw new LangParseError(Errors.EXPECTED_SYMBOL, source.absPos(), '}', source.currentChar())\r\n        }\r\n        source.move()\r\n\r\n        if (/^\\s*$/.test(body)) {\r\n            return new Block([new LangVoid(source.absPos())], source.absPos())\r\n        }\r\n\r\n        const block = this.parseBlock(new Source(body, source.absPos() - body.length))\r\n        return block\r\n    }\r\n    \r\n    readString(source, quoting) {\r\n        let token = ''\r\n        for (; !source.finished(); source.move()) {\r\n            const c = source.currentChar()\r\n\r\n            if (isStringEnding(c, quoting)) {\r\n                source.move()\r\n                return token\r\n            }\r\n            token += c\r\n        }\r\n        throw new LangParseError(Errors.UNEXPECTED_END, source.absPos())\r\n    }\r\n\r\n    readIdentifier(source) {\r\n        let token = ''\r\n        for (; !source.finished(); source.move()) {\r\n            const c = source.currentChar()\r\n            if (isSpace(c)) continue\r\n            if (!new RegExp(`^${RE_IDENTIFIER}$`).test(token + c)) break                \r\n            token += c\r\n        }\r\n        if (token) return token\r\n        throw new LangParseError(Errors.EXPECTED_IDENTIFIER, source.absPos())\r\n    }\r\n\r\n    readUntilBodyOpens(source) {\r\n        let curlies = 0\r\n        let quotations = 0\r\n        let token = ''\r\n        for (; !source.finished(); source.move()) {\r\n            const c = source.currentChar()\r\n            if (isStringStarting(c)) {\r\n                token += this.readString(source, c)\r\n                continue\r\n            }\r\n            if ('(' === c) quotations++\r\n            else\r\n            if (')' === c) quotations--\r\n            else\r\n            if ('{' === c) {\r\n                if (!curlies && !quotations) break\r\n                curlies++\r\n            } else \r\n            if ('}' === c) {\r\n                curlies--\r\n                if (curlies < 0) throw new LangParseError(Errors.UNEXPECTED_SYMBOL, source.absPos(), c)\r\n            }\r\n            token += c\r\n        }\r\n        if (token) return token\r\n    }\r\n\r\n    _stepper() {\r\n        this.steps++\r\n        if (this.steps > this.maxSteps) throw new LangParseError(Errors.PARSER_STEPS_EXCEEDED, source.absPos())\r\n    }\r\n}\r\n\r\nfunction consumeSpaces(source, stopAtNewLine = false) {\r\n    while (!source.finished() && /\\s/.test(source.currentChar()) && (!stopAtNewLine || '\\n' !== source.currentChar())) source.move()\r\n}\r\n\r\nfunction consumeUntil(source, untilChar) {\r\n    const re = new RegExp(untilChar)\r\n    while (!source.finished() && !re.test(source.currentChar())) source.move()\r\n}\r\n\r\nfunction isNumeric(str) {\r\n    return !isNaN(str) && !isNaN(parseFloat(str))\r\n}\r\n\r\nfunction isKeyword(str) {\r\n    str = str.toLowerCase()\r\n    return Object.values(Keywords).some(k => k.includes(str)) ||  Keywords.WHILE.includes(str) || Keywords.IF.includes(str)\r\n}\r\n\r\nfunction isSpace(c, newlines = false) {\r\n    return ('\\n' !== c || newlines) && /\\s+/g.test(c)\r\n}\r\n\r\nfunction isExpressionSeparator(c) {\r\n    return isSpace(c) || isStatementSeparator(c) \r\n        || '(' === c || ')' === c || '[' === c || ']' === c || '{' === c || '}' === c \r\n        || '.' === c || ',' === c\r\n        || BiOperators.some(op => op.startsWith(c)) || UniOperators.some(op => op.startsWith(c))\r\n}\r\n\r\nfunction isStatementSeparator(c) {\r\n    return '\\n' === c || ';' === c\r\n}\r\n\r\nfunction isStringStarting(c) {\r\n    return c === '\"' || c === '“' || c === '”' || c === \"'\"\r\n}\r\n\r\nfunction isStringEnding(c, quoting) {\r\n    return quoting === c || (c === '”' && quoting === '“')\r\n}\r\n\r\nfunction isIdentifier(token) {\r\n    return new RegExp(`^${RE_IDENTIFIER}$`).test(token)\r\n}\r\n\r\nfunction isFunctionDef(remaining) {\r\n    return new RegExp(`^${RE_FUNCTION}`).test(remaining)\r\n}\r\n\r\nfunction isWhileDef(remaining) {\r\n    return Keywords.WHILE.some(k => new RegExp(`^\\\\s*${k}\\\\s(.+)\\\\s{`, 's').test(remaining)) \r\n}\r\n\r\nfunction isIfDef(remaining) {\r\n    return Keywords.IF.some(k => new RegExp(`^\\\\s*${k}\\\\s(.+)\\\\s{`, 's').test(remaining))\r\n}\r\n\r\nfunction isElseDef(remaining) {\r\n    return Keywords.ELSE.some(k => new RegExp(`^\\\\s*${k}\\\\s+{`, 's').test(remaining)) \r\n}\r\n\r\nfunction isElseIfDef(remaining) {\r\n    return Keywords.ELSE.some(k => new RegExp(`^\\\\s*${k}\\\\s+(${Keywords.IF.join('|')})`).test(remaining)) \r\n}\r\n\r\nmodule.exports = Parser","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(17);\n"],"names":["root","factory","exports","module","define","amd","this","Types","Errors","Interruptions","InterpretError","LangInterpretError","Interrupt","LangInterrupt","Void","LangVoid","VariablesScope","constructor","imports","variables","Map","parent","Object","entries","forEach","k","v","set","hasVariable","name","has","get","hasAttribute","getVariable","self","attribute","setVariable","value","scoped","found","scope","pushScope","newScope","popScope","copy","FunctionExecution","funcExp","params","isFunctionExecution","ExecutionStepper","maxSteps","isInterruptedFn","steps","step","source","USER_SUSSPEND","EXECUTION_STEPS_EXCEEDED","reset","controls","stepper","isInterrupted","async","ast","executeBlock","block","result","stm","statements","executeStatement","isExpression","executeExpression","isAssignment","executeAssignment","isWhile","executeWhile","isIf","executeIf","expression","assignNewValue","parts","EMPTY_EXPRESSION","executeExpressionParts","index","assignApplied","findNextOp","op","isObjectAccess","isArrayAccess","ACCESS_OPERATOR_EXPECTED","isUni","a","executeExpressionPart","type","WRONG_UNI_OPERATOR_SUBJECT","apply","removeElementAt","isBi","shortCircuit","b","WRONG_BI_OPERATOR_SUBJECTS","isAddition","STRING","isPrimitive","UNMATCHING_BI_OPERATOR_SUBJECTS","ARRAY","EXPECTED_ARRAY","protectedAttributes","PROTECTED_FROM_MODIFICATION","indexes","Promise","all","map","i","isLastOperator","ATTRIBUTE_NOT_FOUND","o","isObject","isFunction","EXPECTED_OBJECT","isCall","UNKNOWN_OPERATOR","e","isLangError","UNKNOWN_ERROR","isInterpretError","id","arg1","arg2","maxPrecedence","Number","MIN_SAFE_INTEGER","length","isOperator","precedence","arr","filter","_","includes","expressionPart","isReference","varName","UNREFERENCED_VARIABLE","func","p","executeFunctionCall","OBJECT","obj","keys","f","isNative","call","args","FUNC_ARGUMENTS_MISHMASH","variablesBak","arg","body","assignment","left","right","WRONG_ASSIGNMENT","isVariable","variable","protected","WRONG_ASSIGNEE_TYPE","whileStm","condition","WRONG_CONDITION","cond","BOOLEAN","WRONG_CONDITION_VALUE","ifStm","elseBody","FeatureLocalizations","SIZE","INVALID_UNI_OPERATOR","INVALID_BI_OPERATOR","UNEXPECTED_END","UNEXPECTED_SYMBOL","EXPECTED_SYMBOL","UNEXPECTED_KEYWORD","INVALID_IDENTIFIER","UNEVEN_OPERATORS","EXPECTED_FUNCTION","EXPECTED_STATEMENT_END","ARRAY_INDEX_NOT_NUMBER","ARRAY_INDEX_MISSING","ARRAY_INDEX_OUT_BOUNDS","ATTRIBUTE_ALREADY_EXISTS","ELEMENT_NOT_FOUND","OPERATOR_NOT_APPLICABLE","EXPECTED_IDENTIFIER","READONLY_ATTRIBUTE","PARSER_STEPS_EXCEEDED","DIVISION_BY_ZERO","NUMBER","FUNCTION","VOID","LangError","Error","pos","super","details","message","position","Block","s","Statement","Assignment","While","If","bodyElse","Expression","Operator","LangObject","eq","LangNativeFunction","x","LangBoolean","aKeys","bKeys","areObjectsEqual","ne","newValue","isProtected","valueCopy","LangValueObject","LangNumber","mult","div","mod","plus","minus","lt","le","gt","ge","neg","sum","reduce","c","round","Math","floor","ceil","LangString","concat","charAt","sub","j","substring","and","or","xor","nand","LangArray","element","toLowerCase","LangFunction","funcId","g","Keywords","TRUE","FALSE","IF","ELSE","WHILE","Variable","UniOperator","getPrecedence","fn","getFn","BiOperator","leftValue","ArrayAccess","isAccess","ObjectAccess","attrName","FunctionCall","VarReference","ParseError","isParseError","isLangInterruption","String","Boolean","Array","Function","NativeFunction","lang","Parser","Interpret","LudolfC","parser","interpret","code","parse","execute","line","col","max","lineAndCol","LangParseError","UniOperators","BiOperators","RE_NATIONAL_CHARS","RE_IDENTIFIER","RE_FUNCTION","Source","startingAt","res","quote","inString","inComment","isStringStarting","isStringEnding","removeComments","move","currentChar","remaining","min","next","finished","absPos","consumeSpaces","stopAtNewLine","test","consumeUntil","untilChar","re","RegExp","isKeyword","str","values","some","isSpace","newlines","isExpressionSeparator","isStatementSeparator","startsWith","quoting","isIdentifier","token","isWhileDef","isIfDef","fcount","parseBlock","parseStatement","push","_stepper","expecting","inAssignment","openDefinitions","arrays","objects","groups","ops","cc","def","parseWhile","parseIfStatement","parseExpression","trim","exp","inGrouping","parseFunction","leftOperatorExpected","attributes","readAttributes","attr","rightOperatorExpected","readList","readIdentifier","elements","next2","parseMemberExpression","isNaN","parseFloat","parseInt","readString","parseIf","newLine","parseBody","join","isElseIfDef","elseIf","groupingCloseChar","first","condCode","readUntilBodyOpens","readArguments","openQuotings","curlies","quotations","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}